{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, equals as _equals, assert, MathUtils } from 'math.gl';\nvar scratchPosition = new Vector3();\nvar scratchNormal = new Vector3();\n\nvar Plane = function () {\n  function Plane() {\n    var normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 1];\n    var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, Plane);\n\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  _createClass(Plane, [{\n    key: \"fromNormalDistance\",\n    value: function fromNormalDistance(normal, distance) {\n      assert(Number.isFinite(distance));\n      this.normal.from(normal).normalize();\n      this.distance = distance;\n      return this;\n    }\n  }, {\n    key: \"fromPointNormal\",\n    value: function fromPointNormal(point, normal) {\n      point = scratchPosition.from(point);\n      this.normal.from(normal).normalize();\n      var distance = -this.normal.dot(point);\n      this.distance = distance;\n      return this;\n    }\n  }, {\n    key: \"fromCoefficients\",\n    value: function fromCoefficients(a, b, c, d) {\n      this.normal.set(a, b, c);\n      assert(this.normal.len() === 1);\n      this.distance = d;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(plane) {\n      return new Plane(this.normal, this.distance);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(right) {\n      return _equals(this.distance, right.distance) && _equals(this.normal, right.normal);\n    }\n  }, {\n    key: \"getPointDistance\",\n    value: function getPointDistance(point) {\n      return this.normal.dot(point) + this.distance;\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix4) {\n      var normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n      var point = this.normal.scale(-this.distance).transform(matrix4);\n      return this.fromPointNormal(point, normal);\n    }\n  }, {\n    key: \"projectPointOntoPlane\",\n    value: function projectPointOntoPlane(point) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      point = scratchPosition.from(point);\n      var pointDistance = this.getPointDistance(point);\n      var scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n      return point.subtract(scaledNormal).to(result);\n    }\n  }]);\n\n  return Plane;\n}();\n\nexport { Plane as default };","map":null,"metadata":{},"sourceType":"module"}