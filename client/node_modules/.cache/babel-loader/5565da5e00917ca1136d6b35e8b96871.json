{"ast":null,"code":"import { Vector3 } from 'math.gl';\nimport BoundingSphere from '../lib/bounding-sphere';\nvar fromPointsXMin = new Vector3();\nvar fromPointsYMin = new Vector3();\nvar fromPointsZMin = new Vector3();\nvar fromPointsXMax = new Vector3();\nvar fromPointsYMax = new Vector3();\nvar fromPointsZMax = new Vector3();\nvar fromPointsCurrentPos = new Vector3();\nvar fromPointsScratch = new Vector3();\nvar fromPointsRitterCenter = new Vector3();\nvar fromPointsMinBoxPt = new Vector3();\nvar fromPointsMaxBoxPt = new Vector3();\nvar fromPointsNaiveCenterScratch = new Vector3();\nvar volumeConstant = 4.0 / 3.0 * Math.PI;\nexport function makeBoundingSphereFromPoints(positions) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BoundingSphere();\n\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  var currentPos = fromPointsCurrentPos.copy(positions[0]);\n  var xMin = fromPointsXMin.copy(currentPos);\n  var yMin = fromPointsYMin.copy(currentPos);\n  var zMin = fromPointsZMin.copy(currentPos);\n  var xMax = fromPointsXMax.copy(currentPos);\n  var yMax = fromPointsYMax.copy(currentPos);\n  var zMax = fromPointsZMax.copy(currentPos);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var position = _step.value;\n      currentPos.copy(position);\n      var x = currentPos.x;\n      var y = currentPos.y;\n      var z = currentPos.z;\n\n      if (x < xMin.x) {\n        currentPos.copy(xMin);\n      }\n\n      if (x > xMax.x) {\n        currentPos.copy(xMax);\n      }\n\n      if (y < yMin.y) {\n        currentPos.copy(yMin);\n      }\n\n      if (y > yMax.y) {\n        currentPos.copy(yMax);\n      }\n\n      if (z < zMin.z) {\n        currentPos.copy(zMin);\n      }\n\n      if (z > zMax.z) {\n        currentPos.copy(zMax);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  var ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  var zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n  var diameter1 = xMin;\n  var diameter2 = xMax;\n  var maxSpan = xSpan;\n\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  var ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n  var radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  var ritterRadius = Math.sqrt(radiusSquared);\n  var minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n  var maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n  var naiveCenter = fromPointsNaiveCenterScratch.copy(minBoxPt).add(maxBoxPt).multiplyByScalar(0.5);\n  var naiveRadius = 0;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = positions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _position = _step2.value;\n      currentPos.copy(_position);\n      var r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n\n      if (r > naiveRadius) {\n        naiveRadius = r;\n      }\n\n      var oldCenterToPointSquared = fromPointsScratch.copy(currentPos).subtract(ritterCenter).magnitudeSquared();\n\n      if (oldCenterToPointSquared > radiusSquared) {\n        var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n        ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n        radiusSquared = ritterRadius * ritterRadius;\n        var oldToNew = oldCenterToPoint - ritterRadius;\n        ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n        ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n        ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}