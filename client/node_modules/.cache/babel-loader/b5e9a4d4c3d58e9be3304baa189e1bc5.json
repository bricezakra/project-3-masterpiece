{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nexport function parseComposite3DTile(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _parseComposite3DTile.apply(this, arguments);\n}\n\nfunction _parseComposite3DTile() {\n  _parseComposite3DTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context, parse3DTile) {\n    var view, subtile;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n            view = new DataView(arrayBuffer);\n            tile.tilesLength = view.getUint32(byteOffset, true);\n            byteOffset += 4;\n            tile.tiles = [];\n\n          case 5:\n            if (!(tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12)) {\n              _context.next = 13;\n              break;\n            }\n\n            subtile = {};\n            tile.tiles.push(subtile);\n            _context.next = 10;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n\n          case 10:\n            byteOffset = _context.sent;\n            _context.next = 5;\n            break;\n\n          case 13:\n            return _context.abrupt(\"return\", byteOffset);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseComposite3DTile.apply(this, arguments);\n}\n\nexport function parseComposite3DTileSync(tile, arrayBuffer, byteOffset, options, context, parse3DTileSync) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n  var view = new DataView(arrayBuffer);\n  tile.tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n  tile.tiles = [];\n\n  while (tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12) {\n    var subtile = {};\n    tile.tiles.push(subtile);\n    byteOffset = parse3DTileSync(arrayBuffer, byteOffset, options, context, subtile);\n  }\n\n  return byteOffset;\n}","map":null,"metadata":{},"sourceType":"module"}