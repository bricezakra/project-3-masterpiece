{"ast":null,"code":"import { Vector3, Matrix3 } from 'math.gl';\nimport computeEigenDecomposition from './compute-eigen-decomposition';\nvar scratchVector2 = new Vector3();\nvar scratchVector3 = new Vector3();\nvar scratchVector4 = new Vector3();\nvar scratchVector5 = new Vector3();\nvar scratchVector6 = new Vector3();\nvar scratchCovarianceResult = new Matrix3();\nvar scratchEigenResult = {\n  diagonal: new Matrix3(),\n  unitary: new Matrix3()\n};\nexport default function makeOrientedBoundingBoxfromPoints(positions, result) {\n  if (!positions || positions.length === 0) {\n    result.halfAxes = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    result.center = new Vector3();\n    return result;\n  }\n\n  var length = positions.length;\n  var meanPoint = new Vector3(0, 0, 0);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var position = _step.value;\n      meanPoint.add(position);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var invLength = 1.0 / length;\n  meanPoint.multiplyByScalar(invLength);\n  var exx = 0.0;\n  var exy = 0.0;\n  var exz = 0.0;\n  var eyy = 0.0;\n  var eyz = 0.0;\n  var ezz = 0.0;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = positions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _position = _step2.value;\n      var p = scratchVector2.copy(_position).subtract(meanPoint);\n      exx += p.x * p.x;\n      exy += p.x * p.y;\n      exz += p.x * p.z;\n      eyy += p.y * p.y;\n      eyz += p.y * p.z;\n      ezz += p.z * p.z;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  exx *= invLength;\n  exy *= invLength;\n  exz *= invLength;\n  eyy *= invLength;\n  eyz *= invLength;\n  ezz *= invLength;\n  var covarianceMatrix = scratchCovarianceResult;\n  covarianceMatrix[0] = exx;\n  covarianceMatrix[1] = exy;\n  covarianceMatrix[2] = exz;\n  covarianceMatrix[3] = exy;\n  covarianceMatrix[4] = eyy;\n  covarianceMatrix[5] = eyz;\n  covarianceMatrix[6] = exz;\n  covarianceMatrix[7] = eyz;\n  covarianceMatrix[8] = ezz;\n\n  var _computeEigenDecompos = computeEigenDecomposition(covarianceMatrix, scratchEigenResult),\n      unitary = _computeEigenDecompos.unitary;\n\n  var rotation = result.halfAxes.copy(unitary);\n  var v1 = rotation.getColumn(0, scratchVector4);\n  var v2 = rotation.getColumn(1, scratchVector5);\n  var v3 = rotation.getColumn(2, scratchVector6);\n  var u1 = -Number.MAX_VALUE;\n  var u2 = -Number.MAX_VALUE;\n  var u3 = -Number.MAX_VALUE;\n  var l1 = Number.MAX_VALUE;\n  var l2 = Number.MAX_VALUE;\n  var l3 = Number.MAX_VALUE;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = positions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _position2 = _step3.value;\n      u1 = Math.max(_position2.dot(v1), u1);\n      u2 = Math.max(_position2.dot(v2), u2);\n      u3 = Math.max(_position2.dot(v3), u3);\n      l1 = Math.min(_position2.dot(v1), l1);\n      l2 = Math.min(_position2.dot(v2), l2);\n      l3 = Math.min(_position2.dot(v3), l3);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n        _iterator3[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  v1 = v1.multiplyByScalar(0.5 * (l1 + u1));\n  v2 = v2.multiplyByScalar(0.5 * (l2 + u2));\n  v3 = v3.multiplyByScalar(0.5 * (l3 + u3));\n  result.center.copy(v1).add(v2).add(v3);\n  var scale = scratchVector3.set(u1 - l1, u2 - l2, u3 - l3).multiplyByScalar(0.5);\n  result.halfAxes.multiplyByScalar(scale);\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}