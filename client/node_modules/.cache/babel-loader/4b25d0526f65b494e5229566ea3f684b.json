{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport TileCache from './utils/tile-cache';\nvar defaultProps = {\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    }\n  },\n  getTileData: {\n    type: 'function',\n    value: function value(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          z = _ref.z;\n      return Promise.resolve(null);\n    }\n  },\n  onViewportLoaded: {\n    type: 'function',\n    optional: true,\n    value: null\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    }\n  },\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null\n};\n\nvar TileLayer = function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TileLayer).apply(this, arguments));\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tiles: [],\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref2) {\n      var changeFlags = _ref2.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          context = _ref3.context,\n          changeFlags = _ref3.changeFlags;\n      var tileCache = this.state.tileCache;\n\n      if (!tileCache || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData)) {\n        var getTileData = props.getTileData,\n            maxZoom = props.maxZoom,\n            minZoom = props.minZoom,\n            maxCacheSize = props.maxCacheSize;\n\n        if (tileCache) {\n          tileCache.finalize();\n        }\n\n        tileCache = new TileCache({\n          getTileData: getTileData,\n          maxSize: maxCacheSize,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          onTileLoad: this._onTileLoad.bind(this),\n          onTileError: this._onTileError.bind(this)\n        });\n        this.setState({\n          tileCache: tileCache\n        });\n      } else if (changeFlags.updateTriggersChanged) {\n        this.state.tileCache.tiles.forEach(function (tile) {\n          tile.layer = null;\n        });\n      }\n\n      var viewport = context.viewport;\n\n      if (changeFlags.viewportChanged && viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {\n        var z = this.getLayerZoomLevel();\n        tileCache.update(viewport);\n        var currTiles = tileCache.tiles.filter(function (tile) {\n          return tile.z === z;\n        });\n        this.setState({\n          isLoaded: false,\n          tiles: currTiles\n        });\n\n        this._onTileLoad();\n      }\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad() {\n      var onViewportLoaded = this.props.onViewportLoaded;\n      var currTiles = this.state.tiles;\n      var allCurrTilesLoaded = currTiles.every(function (tile) {\n        return tile.isLoaded;\n      });\n\n      if (this.state.isLoaded !== allCurrTilesLoaded) {\n        this.setState({\n          isLoaded: allCurrTilesLoaded\n        });\n\n        if (allCurrTilesLoaded && onViewportLoaded) {\n          onViewportLoaded(currTiles.filter(function (tile) {\n            return tile._data;\n          }).map(function (tile) {\n            return tile._data;\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error) {\n      this.props.onTileError(error);\n\n      this._onTileLoad();\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref4) {\n      var info = _ref4.info,\n          sourceLayer = _ref4.sourceLayer;\n      info.sourceLayer = sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"getLayerZoomLevel\",\n    value: function getLayerZoomLevel() {\n      var z = Math.floor(this.context.viewport.zoom);\n      var _this$props = this.props,\n          maxZoom = _this$props.maxZoom,\n          minZoom = _this$props.minZoom;\n\n      if (Number.isFinite(maxZoom) && z > maxZoom) {\n        return Math.floor(maxZoom);\n      } else if (Number.isFinite(minZoom) && z < minZoom) {\n        return Math.ceil(minZoom);\n      }\n\n      return z;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          renderSubLayers = _this$props2.renderSubLayers,\n          visible = _this$props2.visible;\n      var z = this.getLayerZoomLevel();\n      return this.state.tileCache.tiles.map(function (tile) {\n        var isVisible = visible && tile.isVisible && (!_this.state.isLoaded || tile.z === z);\n\n        if (!tile.layer) {\n          tile.layer = renderSubLayers(Object.assign({}, _this.props, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n            data: tile.data,\n            visible: isVisible,\n            tile: tile\n          }));\n        } else if (tile.layer.props.visible !== isVisible) {\n          tile.layer = tile.layer.clone({\n            visible: isVisible\n          });\n        }\n\n        return tile.layer;\n      });\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}