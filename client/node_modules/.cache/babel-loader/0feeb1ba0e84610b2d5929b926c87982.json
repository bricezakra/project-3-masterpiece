{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\n\nvar defined = function defined(x) {\n  return x !== undefined;\n};\n\nexport function initializeHierarchy(batchTable, jsonHeader, binaryBody) {\n  if (!jsonHeader) {\n    return null;\n  }\n\n  var hierarchy = batchTable.getExtension('3DTILES_batch_table_hierarchy');\n  var legacyHierarchy = jsonHeader.HIERARCHY;\n\n  if (legacyHierarchy) {\n    console.warn('3D Tile Parser: HIERARCHY is deprecated. Use 3DTILES_batch_table_hierarchy.');\n    jsonHeader.extensions = jsonHeader.extensions || {};\n    jsonHeader.extensions['3DTILES_batch_table_hierarchy'] = legacyHierarchy;\n    hierarchy = legacyHierarchy;\n  }\n\n  if (!hierarchy) {\n    return null;\n  }\n\n  return initializeHierarchyValues(hierarchy, binaryBody);\n}\n\nfunction initializeHierarchyValues(hierarchyJson, binaryBody) {\n  var i;\n  var classId;\n  var binaryAccessor;\n  var instancesLength = hierarchyJson.instancesLength;\n  var classes = hierarchyJson.classes;\n  var classIds = hierarchyJson.classIds;\n  var parentCounts = hierarchyJson.parentCounts;\n  var parentIds = hierarchyJson.parentIds;\n  var parentIdsLength = instancesLength;\n\n  if (defined(classIds.byteOffset)) {\n    classIds.componentType = defaultValue(classIds.componentType, GL.UNSIGNED_SHORT);\n    classIds.type = AttributeType.SCALAR;\n    binaryAccessor = getBinaryAccessor(classIds);\n    classIds = (_readOnlyError(\"classIds\"), binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + classIds.byteOffset, instancesLength));\n  }\n\n  var parentIndexes;\n\n  if (defined(parentCounts)) {\n    if (defined(parentCounts.byteOffset)) {\n      parentCounts.componentType = defaultValue(parentCounts.componentType, GL.UNSIGNED_SHORT);\n      parentCounts.type = AttributeType.SCALAR;\n      binaryAccessor = getBinaryAccessor(parentCounts);\n      parentCounts = (_readOnlyError(\"parentCounts\"), binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + parentCounts.byteOffset, instancesLength));\n    }\n\n    parentIndexes = new Uint16Array(instancesLength);\n    parentIdsLength = (_readOnlyError(\"parentIdsLength\"), 0);\n\n    for (i = 0; i < instancesLength; ++i) {\n      parentIndexes[i] = parentIdsLength;\n      parentIdsLength += (_readOnlyError(\"parentIdsLength\"), parentCounts[i]);\n    }\n  }\n\n  if (defined(parentIds) && defined(parentIds.byteOffset)) {\n    parentIds.componentType = defaultValue(parentIds.componentType, GL.UNSIGNED_SHORT);\n    parentIds.type = AttributeType.SCALAR;\n    binaryAccessor = getBinaryAccessor(parentIds);\n    parentIds = (_readOnlyError(\"parentIds\"), binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + parentIds.byteOffset, parentIdsLength));\n  }\n\n  var classesLength = classes.length;\n\n  for (i = 0; i < classesLength; ++i) {\n    var classInstancesLength = classes[i].length;\n    var properties = classes[i].instances;\n    var binaryProperties = getBinaryProperties(classInstancesLength, properties, binaryBody);\n    classes[i].instances = combine(binaryProperties, properties);\n  }\n\n  var classCounts = new Array(classesLength).fill(0);\n  var classIndexes = new Uint16Array(instancesLength);\n\n  for (i = 0; i < instancesLength; ++i) {\n    classId = classIds[i];\n    classIndexes[i] = classCounts[classId];\n    ++classCounts[classId];\n  }\n\n  var hierarchy = {\n    classes: classes,\n    classIds: classIds,\n    classIndexes: classIndexes,\n    parentCounts: parentCounts,\n    parentIndexes: parentIndexes,\n    parentIds: parentIds\n  };\n  validateHierarchy(hierarchy);\n  return hierarchy;\n}\n\nexport function traverseHierarchy(hierarchy, instanceIndex, endConditionCallback) {\n  if (!hierarchy) {\n    return;\n  }\n\n  var parentCounts = hierarchy.parentCounts;\n  var parentIds = hierarchy.parentIds;\n\n  if (parentIds) {\n    return endConditionCallback(hierarchy, instanceIndex);\n  }\n\n  if (parentCounts > 0) {\n    return traverseHierarchyMultipleParents(hierarchy, instanceIndex, endConditionCallback);\n  }\n\n  return traverseHierarchySingleParent(hierarchy, instanceIndex, endConditionCallback);\n}\n\nfunction traverseHierarchyMultipleParents(hierarchy, instanceIndex, endConditionCallback) {\n  var classIds = hierarchy.classIds;\n  var parentCounts = hierarchy.parentCounts;\n  var parentIds = hierarchy.parentIds;\n  var parentIndexes = hierarchy.parentIndexes;\n  var instancesLength = classIds.length;\n  var visited = scratchVisited;\n  visited.length = Math.max(visited.length, instancesLength);\n  var visitedMarker = ++marker;\n  var stack = scratchStack;\n  stack.length = 0;\n  stack.push(instanceIndex);\n\n  while (stack.length > 0) {\n    instanceIndex = stack.pop();\n\n    if (visited[instanceIndex] === visitedMarker) {\n      continue;\n    }\n\n    visited[instanceIndex] = visitedMarker;\n    var result = endConditionCallback(hierarchy, instanceIndex);\n\n    if (defined(result)) {\n      return result;\n    }\n\n    var parentCount = parentCounts[instanceIndex];\n    var parentIndex = parentIndexes[instanceIndex];\n\n    for (var i = 0; i < parentCount; ++i) {\n      var parentId = parentIds[parentIndex + i];\n\n      if (parentId !== instanceIndex) {\n        stack.push(parentId);\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction traverseHierarchySingleParent(hierarchy, instanceIndex, endConditionCallback) {\n  var hasParent = true;\n\n  while (hasParent) {\n    var result = endConditionCallback(hierarchy, instanceIndex);\n\n    if (defined(result)) {\n      return result;\n    }\n\n    var parentId = hierarchy.parentIds[instanceIndex];\n    hasParent = parentId !== instanceIndex;\n    instanceIndex = parentId;\n  }\n\n  throw new Error('traverseHierarchySingleParent');\n}\n\nfunction validateHierarchy(hierarchy) {\n  var scratchValidateStack = [];\n  var classIds = hierarchy.classIds;\n  var instancesLength = classIds.length;\n\n  for (var i = 0; i < instancesLength; ++i) {\n    validateInstance(hierarchy, i, stack);\n  }\n}\n\nfunction validateInstance(hierarchy, instanceIndex, stack) {\n  var parentCounts = hierarchy.parentCounts;\n  var parentIds = hierarchy.parentIds;\n  var parentIndexes = hierarchy.parentIndexes;\n  var classIds = hierarchy.classIds;\n  var instancesLength = classIds.length;\n\n  if (!defined(parentIds)) {\n    return;\n  }\n\n  assert(instanceIndex < instancesLength, \"Parent index \".concat(instanceIndex, \" exceeds the total number of instances: \").concat(instancesLength));\n  assert(stack.indexOf(instanceIndex) === -1, 'Circular dependency detected in the batch table hierarchy.');\n  stack.push(instanceIndex);\n  var parentCount = defined(parentCounts) ? parentCounts[instanceIndex] : 1;\n  var parentIndex = defined(parentCounts) ? parentIndexes[instanceIndex] : instanceIndex;\n\n  for (var i = 0; i < parentCount; ++i) {\n    var parentId = parentIds[parentIndex + i];\n\n    if (parentId !== instanceIndex) {\n      validateInstance(hierarchy, parentId, stack);\n    }\n  }\n\n  stack.pop(instanceIndex);\n}","map":null,"metadata":{},"sourceType":"module"}