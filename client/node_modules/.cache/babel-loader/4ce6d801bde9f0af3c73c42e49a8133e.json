{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { parse3DTile, parse3DTileSync } from './parsers/parse-3d-tile';\n\nfunction parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context, loader) {\n    var tile, byteOffset;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tile = {};\n            byteOffset = 0;\n            _context.next = 4;\n            return parse3DTile(arrayBuffer, byteOffset, options, context, tile);\n\n          case 4:\n            return _context.abrupt(\"return\", tile);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction parseSync(arrayBuffer, options, context, loader) {\n  var tile = {};\n  var byteOffset = 0;\n  parse3DTileSync(arrayBuffer, byteOffset, options, context, tile);\n  return tile;\n}\n\nexport default {\n  name: '3D Tiles',\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeType: 'application/octet-stream',\n  test: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse: parse,\n  parseSync: parseSync,\n  binary: true\n};","map":null,"metadata":{},"sourceType":"module"}