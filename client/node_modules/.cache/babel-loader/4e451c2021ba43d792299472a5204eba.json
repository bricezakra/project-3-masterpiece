{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Model, Geometry } from '@luma.gl/core';\nimport { Layer } from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\nvar defaultProps = {\n  count: 0,\n  texture: null\n};\n\nvar TriangleLayer = function (_Layer) {\n  _inherits(TriangleLayer, _Layer);\n\n  function TriangleLayer() {\n    _classCallCheck(this, TriangleLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TriangleLayer).apply(this, arguments));\n  }\n\n  _createClass(TriangleLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        vs: vs,\n        fs: fs,\n        modules: ['project32']\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          noAlloc: true\n        },\n        texCoords: {\n          size: 2,\n          noAlloc: true\n        }\n      });\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var vertexCount = this.props.vertexCount;\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: vertexCount\n        })\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var model = this.state.model;\n      var _this$props = this.props,\n          texture = _this$props.texture,\n          maxTexture = _this$props.maxTexture,\n          colorTexture = _this$props.colorTexture,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold,\n          colorDomain = _this$props.colorDomain;\n      model.setUniforms(_objectSpread({}, uniforms, {\n        texture: texture,\n        maxTexture: maxTexture,\n        colorTexture: colorTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      })).draw();\n    }\n  }]);\n\n  return TriangleLayer;\n}(Layer);\n\nexport { TriangleLayer as default };\nTriangleLayer.layerName = 'TriangleLayer';\nTriangleLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}