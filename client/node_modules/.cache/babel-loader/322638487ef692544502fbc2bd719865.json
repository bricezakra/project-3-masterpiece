{"ast":null,"code":"import { TILE3D_TYPE } from '../constants';\nimport assert from '../utils/assert';\nimport { encodeComposite3DTile } from './encode-3d-tile-composite';\nimport { encodeBatchedModel3DTile } from './encode-3d-tile-batched-model';\nimport { encodeInstancedModel3DTile } from './encode-3d-tile-instanced-model';\nimport { encodePointCloud3DTile } from './encode-3d-tile-point-cloud';\nexport default function encode3DTile(tile, options) {\n  var byteLength = encode3DTileToDataView(tile, null, 0, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encode3DTileToDataView(tile, dataView, 0, options);\n  return arrayBuffer;\n}\n\nfunction encode3DTileToDataView(tile, dataView, byteOffset, options) {\n  assert(typeof tile.type === 'string');\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      return encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTileToDataView);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return encodePointCloud3DTile(tile, dataView, byteOffset, options);\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return encodeBatchedModel3DTile(tile, dataView, byteOffset, options);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return encodeInstancedModel3DTile(tile, dataView, byteOffset, options);\n\n    default:\n      throw new Error('3D Tiles: unknown tile type');\n  }\n}","map":null,"metadata":{},"sourceType":"module"}