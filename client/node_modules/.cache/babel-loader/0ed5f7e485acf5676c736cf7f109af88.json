{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Vector4, Matrix4, assert } from 'math.gl';\nimport CullingVolume from './culling-volume';\nvar scratchPlaneRightVector = new Vector3();\nvar scratchPlaneNearCenter = new Vector3();\nvar scratchPlaneFarCenter = new Vector3();\nvar scratchPlaneNormal = new Vector3();\n\nvar PerspectiveOffCenterFrustum = function () {\n  function PerspectiveOffCenterFrustum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PerspectiveOffCenterFrustum);\n\n    options = _objectSpread({\n      near: 1.0,\n      far: 500000000.0\n    }, options);\n    this.left = options.left;\n    this._left = undefined;\n    this.right = options.right;\n    this._right = undefined;\n    this.top = options.top;\n    this._top = undefined;\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n    this.near = options.near;\n    this._near = this.near;\n    this.far = options.far;\n    this._far = this.far;\n    this._cullingVolume = new CullingVolume();\n    this._perspectiveMatrix = new Matrix4();\n    this._infinitePerspective = new Matrix4();\n  }\n\n  _createClass(PerspectiveOffCenterFrustum, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PerspectiveOffCenterFrustum({\n        right: this.right,\n        left: this.left,\n        top: this.top,\n        bottom: this.bottom,\n        near: this.near,\n        far: this.far\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && other instanceof PerspectiveOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;\n    }\n  }, {\n    key: \"computeCullingVolume\",\n    value: function computeCullingVolume(position, direction, up) {\n      assert(position, 'position is required.');\n      assert(direction, 'direction is required.');\n      assert(up, 'up is required.');\n      var planes = this._cullingVolume.planes;\n      var right = scratchPlaneRightVector.copy(direction).cross(up);\n      var nearCenter = scratchPlaneNearCenter.copy(direction).multiplyByScalar(this.near).add(position);\n      var farCenter = scratchPlaneFarCenter.copy(direction).multiplyByScalar(this.far).add(position);\n      var normal = scratchPlaneNormal;\n      normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).normalize().cross(up).normalize();\n      planes[0] = planes[0] || new Vector4();\n      var plane = planes[0];\n      plane.x = normal.x;\n      plane.y = normal.y;\n      plane.z = normal.z;\n      plane.w = -normal.dot(position);\n      normal.copy(right).multiplyByScalar(this.right).add(nearCenter).subtract(position).normalize().cross(up).normalize();\n      planes[1] = planes[1] || new Vector4();\n      plane = planes[1];\n      plane.x = normal.x;\n      plane.y = normal.y;\n      plane.z = normal.z;\n      plane.w = -normal.dot(position);\n      normal.copy(up).multiplyByScalar(this.bottom).add(nearCenter).subtract(position).normalize().cross(right).normalize();\n      planes[2] = planes[2] || new Vector4();\n      plane = planes[2];\n      plane.x = normal.x;\n      plane.y = normal.y;\n      plane.z = normal.z;\n      plane.w = -normal.dot(position);\n      normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).normalize().cross(right).normalize();\n      planes[3] = planes[3] || new Vector4();\n      plane = planes[3];\n      plane.x = normal.x;\n      plane.y = normal.y;\n      plane.z = normal.z;\n      plane.w = -normal.dot(position);\n      normal = new Vector3().copy(direction).normalize();\n      planes[4] = planes[4] || new Vector4();\n      plane = planes[4];\n      plane.x = direction.x;\n      plane.y = direction.y;\n      plane.z = direction.z;\n      plane.w = -direction.dot(nearCenter);\n      normal.copy(direction).negate().normalize();\n      planes[5] = planes[5] || new Vector4();\n      plane = planes[5];\n      plane.x = normal.x;\n      plane.y = normal.y;\n      plane.z = normal.z;\n      plane.w = -normal.dot(farCenter);\n      return this._cullingVolume;\n    }\n  }, {\n    key: \"getPixelDimensions\",\n    value: function getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n      update(this);\n      assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n      assert(drawingBufferWidth > 0);\n      assert(drawingBufferHeight > 0);\n      assert(distance > 0);\n      assert(result);\n      var inverseNear = 1.0 / this.near;\n      var tanTheta = this.top * inverseNear;\n      var pixelHeight = 2.0 * distance * tanTheta / drawingBufferHeight;\n      tanTheta = this.right * inverseNear;\n      var pixelWidth = 2.0 * distance * tanTheta / drawingBufferWidth;\n      result.x = pixelWidth;\n      result.y = pixelHeight;\n      return result;\n    }\n  }, {\n    key: \"projectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._perspectiveMatrix;\n    }\n  }, {\n    key: \"infiniteProjectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._infinitePerspective;\n    }\n  }]);\n\n  return PerspectiveOffCenterFrustum;\n}();\n\nexport { PerspectiveOffCenterFrustum as default };\n\nfunction update(frustum) {\n  assert(Number.isFinite(frustum.right) && Number.isFinite(frustum.left) && Number.isFinite(frustum.top) && Number.isFinite(frustum.bottom) && Number.isFinite(frustum.near) && Number.isFinite(frustum.far));\n  var top = frustum.top,\n      bottom = frustum.bottom,\n      right = frustum.right,\n      left = frustum.left,\n      near = frustum.near,\n      far = frustum.far;\n\n  if (top !== frustum._top || bottom !== frustum._bottom || left !== frustum._left || right !== frustum._right || near !== frustum._near || far !== frustum._far) {\n    assert(frustum.near > 0 && frustum.near < frustum.far, 'near must be greater than zero and less than far.');\n    frustum._left = left;\n    frustum._right = right;\n    frustum._top = top;\n    frustum._bottom = bottom;\n    frustum._near = near;\n    frustum._far = far;\n    frustum._perspectiveMatrix = new Matrix4().frustum({\n      left: left,\n      right: right,\n      bottom: bottom,\n      top: top,\n      near: near,\n      far: far\n    });\n    frustum._infinitePerspective = new Matrix4().frustum({\n      left: left,\n      right: right,\n      bottom: bottom,\n      top: top,\n      near: near,\n      far: Infinity\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}