{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { isWebGL2 } from '@luma.gl/core';\nexport function getBounds(points) {\n  var x = points.map(function (p) {\n    return p[0];\n  });\n  var y = points.map(function (p) {\n    return p[1];\n  });\n  var xMin = Math.min.apply(null, x);\n  var xMax = Math.max.apply(null, x);\n  var yMin = Math.min.apply(null, y);\n  var yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\nexport function boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n\n  return false;\n}\nvar scratchArray = new Float32Array(12);\nexport function packVertices(points) {\n  var dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var index = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var point = _step.value;\n\n      for (var i = 0; i < dimensions; i++) {\n        scratchArray[index++] = point[i] || 0;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return scratchArray;\n}\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  var _boundingBox = _slicedToArray(boundingBox, 4),\n      xMin = _boundingBox[0],\n      yMin = _boundingBox[1],\n      xMax = _boundingBox[2],\n      yMax = _boundingBox[3];\n\n  var currentWidth = xMax - xMin;\n  var currentHeight = yMax - yMin;\n  var newWidth = currentWidth;\n  var newHeight = currentHeight;\n\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  var xCenter = (xMax + xMin) / 2;\n  var yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\nexport function getTextureCoordinates(point, bounds) {\n  var _bounds = _slicedToArray(bounds, 4),\n      xMin = _bounds[0],\n      yMin = _bounds[1],\n      xMax = _bounds[2],\n      yMax = _bounds[3];\n\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\nexport function getTextureParams(_ref) {\n  var gl = _ref.gl,\n      floatTargetSupport = _ref.floatTargetSupport;\n  return {\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: floatTargetSupport ? 5126 : 5121\n  };\n}","map":null,"metadata":{},"sourceType":"module"}