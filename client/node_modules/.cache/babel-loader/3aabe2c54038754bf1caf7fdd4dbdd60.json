{"ast":null,"code":"import { Vector3, isArray, toRadians, toDegrees, config } from 'math.gl';\nimport { WGS84_CONSTANTS } from './constants';\n\nvar noop = function noop(x) {\n  return x;\n};\n\nvar scratchVector = new Vector3();\nexport function fromCartographic(cartographic, vector) {\n  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (isArray(cartographic)) {\n    vector[0] = map(cartographic[0]);\n    vector[1] = map(cartographic[1]);\n    vector[2] = cartographic[2];\n  } else if ('longitude' in cartographic) {\n    vector[0] = map(cartographic.longitude);\n    vector[1] = map(cartographic.latitude);\n    vector[2] = cartographic.height;\n  } else {\n    vector[0] = map(cartographic.x);\n    vector[1] = map(cartographic.y);\n    vector[2] = cartographic.z;\n  }\n\n  return vector;\n}\nexport function fromCartographicToRadians(cartographic) {\n  var vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scratchVector;\n  return fromCartographic(cartographic, vector, config.cartographicRadians ? noop : toRadians);\n}\nexport function fromCartographicToDegrees(cartographic) {\n  var vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scratchVector;\n  return fromCartographic(cartographic, vector, config.cartographicRadians ? toDegrees : noop);\n}\nexport function toCartographic(vector, cartographic) {\n  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (isArray(cartographic)) {\n    cartographic[0] = map(vector[0]);\n    cartographic[1] = map(vector[1]);\n    cartographic[2] = vector[2];\n  } else if ('longitude' in cartographic) {\n    cartographic.longitude = map(vector[0]);\n    cartographic.latitude = map(vector[1]);\n    cartographic.height = vector[2];\n  } else {\n    cartographic.x = map(vector[0]);\n    cartographic.y = map(vector[1]);\n    cartographic.z = vector[2];\n  }\n\n  return cartographic;\n}\nexport function toCartographicFromRadians(vector, cartographic) {\n  return toCartographic(vector, cartographic, config.cartographicRadians ? noop : toDegrees);\n}\nexport function toCartographicFromDegrees(vector, cartographic) {\n  return toCartographic(vector, cartographic, config.cartographicRadians ? toRadians : noop);\n}\nexport function isWGS84(vector) {\n  if (!vector) {\n    return false;\n  }\n\n  scratchVector.from(vector);\n  var oneOverRadiiSquared = WGS84_CONSTANTS.oneOverRadiiSquared,\n      centerToleranceSquared = WGS84_CONSTANTS.centerToleranceSquared;\n  var x2 = vector[0] * vector[0] * oneOverRadiiSquared[0];\n  var y2 = vector[1] * vector[1] * oneOverRadiiSquared[1];\n  var z2 = vector[2] * vector[2] * oneOverRadiiSquared[2];\n  return Math.abs(x2 + y2 + z2 - 1) < centerToleranceSquared;\n}","map":null,"metadata":{},"sourceType":"module"}