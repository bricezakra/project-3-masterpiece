{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { GL, GLType } from '@loaders.gl/math';\n\nvar Tile3DFeatureTable = function () {\n  function Tile3DFeatureTable(featureTableJson, featureTableBinary) {\n    _classCallCheck(this, Tile3DFeatureTable);\n\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n    this.featuresLength = 0;\n    this._cachedTypedArrays = {};\n  }\n\n  _createClass(Tile3DFeatureTable, [{\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      return this.json.extensions && this.json.extensions[extensionName];\n    }\n  }, {\n    key: \"hasProperty\",\n    value: function hasProperty(propertyName) {\n      return Boolean(this.json[propertyName]);\n    }\n  }, {\n    key: \"getGlobalProperty\",\n    value: function getGlobalProperty(propertyName) {\n      var componentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GL.UNSIGNED_INT;\n      var componentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var jsonValue = this.json[propertyName];\n\n      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);\n      }\n\n      return jsonValue;\n    }\n  }, {\n    key: \"getPropertyArray\",\n    value: function getPropertyArray(propertyName, componentType, componentLength) {\n      var jsonValue = this.json[propertyName];\n\n      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n        if ('componentType' in jsonValue) {\n          componentType = GLType.fromName(jsonValue.componentType);\n        }\n\n        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n      }\n\n      return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(propertyName, componentType, componentLength, featureId, result) {\n      var jsonValue = this.json[propertyName];\n\n      if (!jsonValue) {\n        return jsonValue;\n      }\n\n      var typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n      if (componentLength === 1) {\n        return typedArray[featureId];\n      }\n\n      for (var i = 0; i < componentLength; ++i) {\n        result[i] = typedArray[componentLength * featureId + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getTypedArrayFromBinary\",\n    value: function _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n      var cachedTypedArrays = this._cachedTypedArrays;\n      var typedArray = cachedTypedArrays[propertyName];\n\n      if (!typedArray) {\n        typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count * componentLength);\n        cachedTypedArrays[propertyName] = typedArray;\n      }\n\n      return typedArray;\n    }\n  }, {\n    key: \"_getTypedArrayFromArray\",\n    value: function _getTypedArrayFromArray(propertyName, componentType, array) {\n      var cachedTypedArrays = this._cachedTypedArrays;\n      var typedArray = cachedTypedArrays[propertyName];\n\n      if (!typedArray) {\n        typedArray = GLType.createTypedArray(componentType, array);\n        cachedTypedArrays[propertyName] = typedArray;\n      }\n\n      return typedArray;\n    }\n  }]);\n\n  return Tile3DFeatureTable;\n}();\n\nexport { Tile3DFeatureTable as default };","map":null,"metadata":{},"sourceType":"module"}