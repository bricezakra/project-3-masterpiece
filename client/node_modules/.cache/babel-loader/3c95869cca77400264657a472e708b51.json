{"ast":null,"code":"import { Vector3 } from 'math.gl';\nimport { CullingVolume, Plane } from '@math.gl/culling';\nimport { Ellipsoid } from '@math.gl/geospatial';\nvar scratchPlane = new Plane();\nvar scratchPosition = new Vector3();\nvar cullingVolume = new CullingVolume([new Plane(), new Plane(), new Plane(), new Plane(), new Plane(), new Plane()]);\nexport function getFrameState(viewport, frameNumber) {\n  var cameraDirection = viewport.cameraDirection,\n      cameraUp = viewport.cameraUp,\n      height = viewport.height;\n  var metersPerPixel = viewport.distanceScales.metersPerPixel;\n  var viewportCenterCartographic = [viewport.longitude, viewport.latitude, 0];\n  var viewportCenterCartesian = Ellipsoid.WGS84.cartographicToCartesian(viewportCenterCartographic, new Vector3());\n  var enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n  var cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  var cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(cameraPositionCartographic, new Vector3());\n  var cameraDirectionCartesian = new Vector3(enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerPixel))).normalize();\n  var cameraUpCartesian = new Vector3(enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerPixel))).normalize();\n  commonSpacePlanesToWGS84(viewport);\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    height: height,\n    cullingVolume: cullingVolume,\n    frameNumber: frameNumber,\n    sseDenominator: 1.15\n  };\n}\n\nfunction commonSpacePlanesToWGS84(viewport) {\n  var viewportCenterCartographic = [viewport.longitude, viewport.latitude, 0];\n  var viewportCenterCartesian = Ellipsoid.WGS84.cartographicToCartesian(viewportCenterCartographic, new Vector3());\n  var frustumPlanes = viewport.getFrustumPlanes();\n  var i = 0;\n\n  for (var dir in frustumPlanes) {\n    var plane = frustumPlanes[dir];\n    var distanceToCenter = plane.normal.dot(viewport.center);\n    scratchPosition.copy(plane.normal).scale(plane.distance - distanceToCenter).add(viewport.center);\n    var cartographicPos = viewport.unprojectPosition(scratchPosition);\n    var cartesianPos = Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, new Vector3());\n    scratchPlane.normal.copy(cartesianPos).subtract(viewportCenterCartesian).scale(-1).normalize();\n    scratchPlane.distance = Math.abs(scratchPlane.normal.dot(cartesianPos));\n    cullingVolume.planes[i].normal.copy(scratchPlane.normal);\n    cullingVolume.planes[i].distance = scratchPlane.distance;\n    i = i + 1;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}