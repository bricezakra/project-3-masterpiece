{"ast":null,"code":"import { Vector3 } from 'math.gl';\nimport { GL } from '@loaders.gl/math';\nexport function normalize3DTilePositionAttribute(tile, positions, options) {\n  if (!tile.isQuantized) {\n    return positions;\n  }\n\n  if (options.decodeQuantizedPositions) {\n    tile.isQuantized = false;\n    return decodeQuantizedPositions(tile, positions);\n  }\n\n  return {\n    type: GL.UNSIGNED_SHORT,\n    value: positions,\n    size: 3,\n    normalized: true\n  };\n}\n\nfunction decodeQuantizedPositions(tile, positions) {\n  var scratchPosition = new Vector3();\n  var decodedArray = new Float32Array(tile.pointCount * 3);\n\n  for (var i = 0; i < tile.pointCount; i++) {\n    scratchPosition.set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]).scale(1 / tile.quantizedRange).multiply(tile.quantizedVolumeScale).add(tile.quantizedVolumeOffset).toArray(decodedArray, i * 3);\n  }\n\n  return decodedArray;\n}","map":null,"metadata":{},"sourceType":"module"}