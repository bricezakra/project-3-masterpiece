{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GL } from '@loaders.gl/math';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from './helpers/parse-3d-tile-tables';\nimport { parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT } from './helpers/parse-3d-tile-gltf-view';\nexport function parseBatchedModel3DTile(_x, _x2, _x3, _x4, _x5) {\n  return _parseBatchedModel3DTile.apply(this, arguments);\n}\n\nfunction _parseBatchedModel3DTile() {\n  _parseBatchedModel3DTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n            _context.next = 3;\n            return extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n\n          case 3:\n            return _context.abrupt(\"return\", byteOffset);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseBatchedModel3DTile.apply(this, arguments);\n}\n\nexport function parseBatchedModel3DTileSync(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n  return byteOffset;\n}\nexport function parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n  var featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n  return byteOffset;\n}","map":null,"metadata":{},"sourceType":"module"}