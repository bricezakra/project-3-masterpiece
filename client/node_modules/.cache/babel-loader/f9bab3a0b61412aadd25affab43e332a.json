{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from '../utils/assert';\nimport { _getErrorMessageFromResponse } from '@loaders.gl/core';\nvar CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\nexport function getIonTilesetMetadata(_x, _x2) {\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nfunction _getIonTilesetMetadata() {\n  _getIonTilesetMetadata = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(accessToken, assetId) {\n    var assets, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, ionAssetMetadata, type, url;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (assetId) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 3;\n            return getIonAssets(accessToken);\n\n          case 3:\n            assets = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 7;\n\n            for (_iterator = assets.items[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              item = _step.value;\n\n              if (item.type === '3DTILES') {\n                assetId = item.id;\n              }\n            }\n\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 15:\n            _context.prev = 15;\n            _context.prev = 16;\n\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n\n          case 18:\n            _context.prev = 18;\n\n            if (!_didIteratorError) {\n              _context.next = 21;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 21:\n            return _context.finish(18);\n\n          case 22:\n            return _context.finish(15);\n\n          case 23:\n            _context.next = 25;\n            return getIonAssetMetadata(accessToken, assetId);\n\n          case 25:\n            ionAssetMetadata = _context.sent;\n            type = ionAssetMetadata.type, url = ionAssetMetadata.url;\n            assert(type === '3DTILES' && url);\n            ionAssetMetadata.headers = {\n              Authorization: \"Bearer \".concat(ionAssetMetadata.accessToken)\n            };\n            return _context.abrupt(\"return\", ionAssetMetadata);\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 11, 15, 23], [16,, 18, 22]]);\n  }));\n  return _getIonTilesetMetadata.apply(this, arguments);\n}\n\nexport function getIonAssets(_x3) {\n  return _getIonAssets.apply(this, arguments);\n}\n\nfunction _getIonAssets() {\n  _getIonAssets = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(accessToken) {\n    var url, headers, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            assert(accessToken);\n            url = CESIUM_ION_URL;\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            _context2.next = 5;\n            return fetch(url, {\n              headers: headers\n            });\n\n          case 5:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.t0 = Error;\n            _context2.next = 10;\n            return _getErrorMessageFromResponse(response);\n\n          case 10:\n            _context2.t1 = _context2.sent;\n            throw new _context2.t0(_context2.t1);\n\n          case 12:\n            _context2.next = 14;\n            return response.json();\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getIonAssets.apply(this, arguments);\n}\n\nexport function getIonAssetMetadata(_x4, _x5) {\n  return _getIonAssetMetadata.apply(this, arguments);\n}\n\nfunction _getIonAssetMetadata() {\n  _getIonAssetMetadata = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(accessToken, assetId) {\n    var url, headers, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            assert(accessToken, assetId);\n            url = \"\".concat(CESIUM_ION_URL, \"/\").concat(assetId, \"/endpoint\");\n            headers = {\n              Authorization: \"Bearer \".concat(accessToken)\n            };\n            _context3.next = 5;\n            return fetch(url, {\n              headers: headers\n            });\n\n          case 5:\n            response = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.t0 = Error;\n            _context3.next = 10;\n            return _getErrorMessageFromResponse(response);\n\n          case 10:\n            _context3.t1 = _context3.sent;\n            throw new _context3.t0(_context3.t1);\n\n          case 12:\n            _context3.next = 14;\n            return response.json();\n\n          case 14:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getIonAssetMetadata.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}