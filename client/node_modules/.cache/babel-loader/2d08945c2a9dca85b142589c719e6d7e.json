{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { Matrix4, Vector3 } from 'math.gl';\nexport function calculateTransformProps(tileHeader, tile) {\n  assert(tileHeader);\n  assert(tile);\n  var rtcCenter = tile.rtcCenter,\n      rotateYtoZ = tile.rotateYtoZ;\n  var computedTransform = tileHeader.computedTransform,\n      center = tileHeader._boundingVolume.center;\n  var modelMatrix = new Matrix4(computedTransform);\n\n  if (rtcCenter) {\n    modelMatrix.translate(rtcCenter);\n  }\n\n  if (rotateYtoZ) {\n    var rotation = new Matrix4().rotateX(Math.PI / 2);\n    modelMatrix = modelMatrix.multiplyRight(rotation);\n  }\n\n  if (tile.isQuantized) {\n    modelMatrix.translate(tile.quantizedVolumeOffset).scale(tile.quantizedVolumeScale);\n  }\n\n  var cartesianOrigin = new Vector3(center);\n  tile.cartesianModelMatrix = modelMatrix;\n  tile.cartesianOrigin = cartesianOrigin;\n  var cartographicOrigin = Ellipsoid.WGS84.cartesianToCartographic(cartesianOrigin, new Vector3());\n  var fromFixedFrameMatrix = Ellipsoid.WGS84.eastNorthUpToFixedFrame(cartesianOrigin);\n  var toFixedFrameMatrix = fromFixedFrameMatrix.invert();\n  tile.cartographicModelMatrix = toFixedFrameMatrix.multiplyRight(modelMatrix);\n  tile.cartographicOrigin = cartographicOrigin;\n  tile.modelMatrix = tile.cartographicModelMatrix;\n}","map":null,"metadata":{},"sourceType":"module"}