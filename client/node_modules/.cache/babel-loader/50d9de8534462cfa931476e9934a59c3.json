{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { Layer } from '@deck.gl/core';\nimport { ScenegraphNode, isWebGL2, pbr, log } from '@luma.gl/core';\nimport { createGLTFObjects } from '@luma.gl/addons';\nimport { waitForGLTFAssets } from './gltf-utils';\nimport { MATRIX_ATTRIBUTES } from '../utils/matrix';\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\nvar DEFAULT_COLOR = [255, 255, 255, 255];\nvar defaultProps = {\n  scenegraph: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  getScene: function getScene(gltf) {\n    if (gltf && gltf.scenes) {\n      return _typeof(gltf.scene) === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n\n    return gltf;\n  },\n  getAnimator: function getAnimator(scenegraph) {\n    return scenegraph && scenegraph.animator;\n  },\n  _animations: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  opacity: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1.0\n  },\n  _lighting: 'flat',\n  _composeModelMatrix: false,\n  _imageBasedLightingEnvironment: null,\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\n\nvar ScenegraphLayer = function (_Layer) {\n  _inherits(ScenegraphLayer, _Layer);\n\n  function ScenegraphLayer() {\n    _classCallCheck(this, ScenegraphLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScenegraphLayer).apply(this, arguments));\n  }\n\n  _createClass(ScenegraphLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          accessor: 'getPosition',\n          transition: true\n        },\n        instanceColors: {\n          type: 5121,\n          size: this.props.colorFormat.length,\n          accessor: 'getColor',\n          normalized: true,\n          defaultValue: DEFAULT_COLOR,\n          transition: true\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(ScenegraphLayer.prototype), \"updateState\", this).call(this, params);\n\n      var props = params.props,\n          oldProps = params.oldProps;\n\n      if (props.scenegraph !== oldProps.scenegraph) {\n        this._updateScenegraph(props);\n      } else if (props._animations !== oldProps._animations) {\n        this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(ScenegraphLayer.prototype), \"finalizeState\", this).call(this);\n\n      this._deleteScenegraph();\n    }\n  }, {\n    key: \"_updateScenegraph\",\n    value: function _updateScenegraph(props) {\n      var _this = this;\n\n      var gl = this.context.gl;\n      var scenegraphData;\n\n      if (props.scenegraph instanceof ScenegraphNode) {\n        scenegraphData = {\n          scenes: [props.scenegraph]\n        };\n      } else if (props.scenegraph && !props.scenegraph.gltf) {\n        var gltf = props.scenegraph;\n        var gltfObjects = createGLTFObjects(gl, gltf, this.getLoadOptions());\n        scenegraphData = Object.assign({\n          gltf: gltf\n        }, gltfObjects);\n        waitForGLTFAssets(gltfObjects).then(function () {\n          return _this.setNeedsRedraw();\n        });\n      } else {\n        log.deprecated('ScenegraphLayer.props.scenegraph', 'Use GLTFLoader instead of GLTFScenegraphLoader');\n        scenegraphData = props.scenegraph;\n      }\n\n      var options = {\n        layer: this,\n        gl: gl\n      };\n      var scenegraph = props.getScene(scenegraphData, options);\n      var animator = props.getAnimator(scenegraphData, options);\n\n      if (scenegraph instanceof ScenegraphNode) {\n        this._deleteScenegraph();\n\n        this._applyAllAttributes(scenegraph);\n\n        this._applyAnimationsProp(scenegraph, animator, props._animations);\n\n        this.setState({\n          scenegraph: scenegraph,\n          animator: animator\n        });\n      } else if (scenegraph !== null) {\n        log.warn('invalid scenegraph:', scenegraph)();\n      }\n    }\n  }, {\n    key: \"_applyAllAttributes\",\n    value: function _applyAllAttributes(scenegraph) {\n      var _this2 = this;\n\n      if (this.state.attributesAvailable) {\n        var allAttributes = this.getAttributeManager().getAttributes();\n        scenegraph.traverse(function (model) {\n          _this2._setModelAttributes(model.model, allAttributes);\n        });\n      }\n    }\n  }, {\n    key: \"_applyAnimationsProp\",\n    value: function _applyAnimationsProp(scenegraph, animator, animationsProp) {\n      if (!scenegraph || !animator || !animationsProp) {\n        return;\n      }\n\n      var animations = animator.getAnimations();\n      Object.keys(animationsProp).sort().forEach(function (key) {\n        var value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(function (animation) {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          var number = Number(key);\n\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(\"animation \".concat(key, \" not found\"))();\n          }\n        } else {\n          var findResult = animations.find(function (_ref) {\n            var name = _ref.name;\n            return name === key;\n          });\n\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(\"animation \".concat(key, \" not found\"))();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_deleteScenegraph\",\n    value: function _deleteScenegraph() {\n      var scenegraph = this.state.scenegraph;\n\n      if (scenegraph instanceof ScenegraphNode) {\n        scenegraph[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"addVersionToShader\",\n    value: function addVersionToShader(source) {\n      if (isWebGL2(this.context.gl)) {\n        return \"#version 300 es\\n\".concat(source);\n      }\n\n      return source;\n    }\n  }, {\n    key: \"getLoadOptions\",\n    value: function getLoadOptions() {\n      var modules = ['project32', 'picking'];\n      var _this$props = this.props,\n          _lighting = _this$props._lighting,\n          _imageBasedLightingEnvironment = _this$props._imageBasedLightingEnvironment;\n\n      if (_lighting === 'pbr') {\n        modules.push(pbr);\n      }\n\n      var env = null;\n\n      if (_imageBasedLightingEnvironment) {\n        if (typeof _imageBasedLightingEnvironment === 'function') {\n          env = _imageBasedLightingEnvironment({\n            gl: this.context.gl,\n            layer: this\n          });\n        } else {\n          env = _imageBasedLightingEnvironment;\n        }\n      }\n\n      return {\n        gl: this.context.gl,\n        waitForFullLoad: true,\n        imageBasedLightingEnvironment: env,\n        modelOptions: {\n          vs: this.addVersionToShader(vs),\n          fs: this.addVersionToShader(fs),\n          modules: modules,\n          isInstanced: true\n        },\n        useTangents: false\n      };\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      var _this3 = this;\n\n      this.setState({\n        attributesAvailable: true\n      });\n      if (!this.state.scenegraph) return;\n      this.state.scenegraph.traverse(function (model) {\n        _this3._setModelAttributes(model.model, changedAttributes);\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var _ref2$moduleParameter = _ref2.moduleParameters,\n          moduleParameters = _ref2$moduleParameter === void 0 ? null : _ref2$moduleParameter,\n          _ref2$parameters = _ref2.parameters,\n          parameters = _ref2$parameters === void 0 ? {} : _ref2$parameters,\n          context = _ref2.context;\n      if (!this.state.scenegraph) return;\n\n      if (this.props._animations && this.state.animator) {\n        this.state.animator.animate(context.animationProps.time);\n      }\n\n      var _this$props2 = this.props,\n          sizeScale = _this$props2.sizeScale,\n          opacity = _this$props2.opacity,\n          _composeModelMatrix = _this$props2._composeModelMatrix;\n      var numInstances = this.getNumInstances();\n      this.state.scenegraph.traverse(function (model, _ref3) {\n        var worldMatrix = _ref3.worldMatrix;\n        model.model.setInstanceCount(numInstances);\n        model.updateModuleSettings(moduleParameters);\n        model.draw({\n          parameters: parameters,\n          uniforms: {\n            sizeScale: sizeScale,\n            opacity: opacity,\n            enableOffsetModelMatrix: _composeModelMatrix,\n            sceneModelMatrix: worldMatrix,\n            u_Camera: model.model.program.uniforms.project_uCameraPosition\n          }\n        });\n      });\n    }\n  }]);\n\n  return ScenegraphLayer;\n}(Layer);\n\nexport { ScenegraphLayer as default };\nScenegraphLayer.layerName = 'ScenegraphLayer';\nScenegraphLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}