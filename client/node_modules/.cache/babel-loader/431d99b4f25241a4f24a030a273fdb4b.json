{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Vector3 } from 'math.gl';\nimport { GL } from '@loaders.gl/math';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport { parse3DTileHeaderSync } from './helpers/parse-3d-tile-header';\nimport { parse3DTileTablesHeaderSync, parse3DTileTablesSync } from './helpers/parse-3d-tile-tables';\nimport { normalize3DTileColorAttribute } from './helpers/normalize-3d-tile-colors';\nimport { normalize3DTileNormalAttribute } from './helpers/normalize-3d-tile-normals';\nimport { normalize3DTilePositionAttribute } from './helpers/normalize-3d-tile-positions';\nexport function parsePointCloud3DTile(_x, _x2, _x3, _x4, _x5) {\n  return _parsePointCloud3DTile.apply(this, arguments);\n}\n\nfunction _parsePointCloud3DTile() {\n  _parsePointCloud3DTile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(tile, arrayBuffer, byteOffset, options, context) {\n    var _parsePointCloudTable2, featureTable, batchTable;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n            byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset, options);\n            byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n            initializeTile(tile);\n            _parsePointCloudTable2 = parsePointCloudTables(tile), featureTable = _parsePointCloudTable2.featureTable, batchTable = _parsePointCloudTable2.batchTable;\n            _context.next = 7;\n            return parseDraco(tile, featureTable, batchTable, options, context);\n\n          case 7:\n            parsePositions(tile, featureTable, options);\n            parseColors(tile, featureTable, batchTable, options);\n            parseNormals(tile, featureTable, options);\n            return _context.abrupt(\"return\", byteOffset);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parsePointCloud3DTile.apply(this, arguments);\n}\n\nexport function parsePointCloud3DTileSync(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n\n  var _parsePointCloudTable = parsePointCloudTables(tile),\n      featureTable = _parsePointCloudTable.featureTable;\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, options);\n  parseNormals(tile, featureTable, options);\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  var featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  var pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n\n  featureTable.featuresLength = pointsLength;\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n  var batchTable = parseBatchIds(tile, featureTable);\n  return {\n    featureTable: featureTable,\n    batchTable: batchTable\n  };\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      var positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty('QUANTIZED_VOLUME_SCALE', GL.FLOAT, 3);\n\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty('QUANTIZED_VOLUME_OFFSET', GL.FLOAT, 3);\n\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    var colors = null;\n\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    var normals = null;\n\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  var batchTable = null;\n\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      var batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n\n      var batchTableJson = tile.batchTableJson,\n          batchTableBinary = tile.batchTableBinary;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n\n  return batchTable;\n}\n\nfunction parseDraco(_x6, _x7, _x8, _x9, _x10) {\n  return _parseDraco.apply(this, arguments);\n}\n\nfunction _parseDraco() {\n  _parseDraco = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(tile, featureTable, batchTable, options, context) {\n    var dracoBuffer, dracoFeatureTableProperties, dracoBatchTableProperties, batchTableDraco, featureTableDraco, dracoByteOffset, dracoByteLength, dracoData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            batchTableDraco = batchTable && batchTable.getExtension('3DTILES_draco_point_compression');\n\n            if (batchTableDraco) {\n              dracoBatchTableProperties = batchTableDraco.properties;\n            }\n\n            featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n\n            if (!featureTableDraco) {\n              _context2.next = 15;\n              break;\n            }\n\n            dracoFeatureTableProperties = featureTableDraco.properties;\n            dracoByteOffset = featureTableDraco.byteOffset;\n            dracoByteLength = featureTableDraco.byteLength;\n\n            if (!(!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength)) {\n              _context2.next = 9;\n              break;\n            }\n\n            throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n\n          case 9:\n            dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n            tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n            tile.hasColors = Number.isFinite(dracoFeatureTableProperties.RGB) || Number.isFinite(dracoFeatureTableProperties.RGBA);\n            tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n            tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n            tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n\n          case 15:\n            if (!dracoBuffer) {\n              _context2.next = 19;\n              break;\n            }\n\n            dracoData = {\n              buffer: dracoBuffer,\n              properties: _objectSpread({}, dracoFeatureTableProperties, {}, dracoBatchTableProperties),\n              featureTableProperties: dracoFeatureTableProperties,\n              batchTableProperties: dracoBatchTableProperties,\n              dequantizeInShader: false\n            };\n            _context2.next = 19;\n            return loadDraco(tile, dracoData, options, context);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseDraco.apply(this, arguments);\n}\n\nexport function loadDraco(_x11, _x12, _x13, _x14) {\n  return _loadDraco.apply(this, arguments);\n}\n\nfunction _loadDraco() {\n  _loadDraco = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(tile, dracoData, options, context) {\n    var parse, data, decodedPositions, decodedColors, decodedNormals, decodedBatchIds, isQuantizedDraco, isOctEncodedDraco, quantization, range;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parse = context.parse;\n            _context3.next = 3;\n            return parse(dracoData.buffer, options.DracoLoader);\n\n          case 3:\n            data = _context3.sent;\n            decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n            decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n            decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n            decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n            isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n            isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n\n            if (isQuantizedDraco) {\n              quantization = data.POSITION.data.quantization;\n              range = quantization.range;\n              tile.quantizedVolumeScale = new Vector3(range, range, range);\n              tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n              tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n              tile.isQuantizedDraco = true;\n            }\n\n            if (isOctEncodedDraco) {\n              tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n              tile.isOctEncodedDraco = true;\n            }\n\n            tile.attributes = {\n              positions: decodedPositions,\n              colors: normalize3DTileColorAttribute(tile, decodedColors),\n              normals: decodedNormals,\n              batchIds: decodedBatchIds\n            };\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadDraco.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}