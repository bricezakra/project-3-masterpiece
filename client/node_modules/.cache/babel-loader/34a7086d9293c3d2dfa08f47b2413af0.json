{"ast":null,"code":"import { GLType } from '@loaders.gl/math';\nimport assert from '../../utils/assert';\nvar COMPONENTS_PER_ATTRIBUTE = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nvar UNPACKER = {\n  SCALAR: function SCALAR(values, i) {\n    return values[i];\n  },\n  VEC2: function VEC2(values, i) {\n    return [values[2 * i + 0], values[2 * i + 1]];\n  },\n  VEC3: function VEC3(values, i) {\n    return [values[3 * i + 0], values[3 * i + 1], values[3 * i + 2]];\n  },\n  VEC4: function VEC4(values, i) {\n    return [values[4 * i + 0], values[4 * i + 1], values[4 * i + 2], values[4 * i + 3]];\n  },\n  MAT2: function MAT2(values, i) {\n    return [values[4 * i + 0], values[4 * i + 1], values[4 * i + 2], values[4 * i + 3]];\n  },\n  MAT3: function MAT3(values, i) {\n    return [values[9 * i + 0], values[9 * i + 1], values[9 * i + 2], values[9 * i + 3], values[9 * i + 4], values[9 * i + 5], values[9 * i + 6], values[9 * i + 7], values[9 * i + 8]];\n  },\n  MAT4: function MAT4(values, i) {\n    return [values[16 * i + 0], values[16 * i + 1], values[16 * i + 2], values[16 * i + 3], values[16 * i + 4], values[16 * i + 5], values[16 * i + 6], values[16 * i + 7], values[16 * i + 8], values[16 * i + 9], values[16 * i + 10], values[16 * i + 11], values[16 * i + 12], values[16 * i + 13], values[16 * i + 14], values[16 * i + 15]];\n  }\n};\nvar PACKER = {\n  SCALAR: function SCALAR(x, values, i) {\n    values[i] = x;\n  },\n  VEC2: function VEC2(x, values, i) {\n    values[2 * i + 0] = x[0];\n    values[2 * i + 1] = x[1];\n  },\n  VEC3: function VEC3(x, values, i) {\n    values[3 * i + 0] = x[0];\n    values[3 * i + 1] = x[1];\n    values[3 * i + 2] = x[2];\n  },\n  VEC4: function VEC4(x, values, i) {\n    values[4 * i + 0] = x[0];\n    values[4 * i + 1] = x[1];\n    values[4 * i + 2] = x[2];\n    values[4 * i + 3] = x[3];\n  },\n  MAT2: function MAT2(x, values, i) {\n    values[4 * i + 0] = x[0];\n    values[4 * i + 1] = x[1];\n    values[4 * i + 2] = x[2];\n    values[4 * i + 3] = x[3];\n  },\n  MAT3: function MAT3(x, values, i) {\n    values[9 * i + 0] = x[0];\n    values[9 * i + 1] = x[1];\n    values[9 * i + 2] = x[2];\n    values[9 * i + 3] = x[3];\n    values[9 * i + 4] = x[4];\n    values[9 * i + 5] = x[5];\n    values[9 * i + 6] = x[6];\n    values[9 * i + 7] = x[7];\n    values[9 * i + 8] = x[8];\n    values[9 * i + 9] = x[9];\n  },\n  MAT4: function MAT4(x, values, i) {\n    values[16 * i + 0] = x[0];\n    values[16 * i + 1] = x[1];\n    values[16 * i + 2] = x[2];\n    values[16 * i + 3] = x[3];\n    values[16 * i + 4] = x[4];\n    values[16 * i + 5] = x[5];\n    values[16 * i + 6] = x[6];\n    values[16 * i + 7] = x[7];\n    values[16 * i + 8] = x[8];\n    values[16 * i + 9] = x[9];\n    values[16 * i + 10] = x[10];\n    values[16 * i + 11] = x[11];\n    values[16 * i + 12] = x[12];\n    values[16 * i + 13] = x[13];\n    values[16 * i + 14] = x[14];\n    values[16 * i + 15] = x[15];\n  }\n};\nexport function createTypedArrayFromAccessor(tile3DAccessor, buffer, byteOffset, length) {\n  var componentType = tile3DAccessor.componentType;\n  assert(tile3DAccessor.componentType);\n  var type = typeof componentType === 'string' ? GLType.fromName(componentType) : componentType;\n  var size = COMPONENTS_PER_ATTRIBUTE[tile3DAccessor.type];\n  var unpacker = UNPACKER[tile3DAccessor.type];\n  var packer = PACKER[tile3DAccessor.type];\n  byteOffset += tile3DAccessor.byteOffset;\n  var values = GLType.createTypedArray(type, buffer, byteOffset, size * length);\n  return {\n    values: values,\n    type: type,\n    size: size,\n    unpacker: unpacker,\n    packer: packer\n  };\n}","map":null,"metadata":{},"sourceType":"module"}