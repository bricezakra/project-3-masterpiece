{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { PhongMaterial } from '@luma.gl/core';\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\n\nfunction nop() {}\n\nvar defaultMaterial = new PhongMaterial();\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  material: defaultMaterial\n};\n\nvar HexagonLayer = function (_CompositeLayer) {\n  _inherits(HexagonLayer, _CompositeLayer);\n\n  function HexagonLayer() {\n    _classCallCheck(this, HexagonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HexagonLayer).apply(this, arguments));\n  }\n\n  _createClass(HexagonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new CPUAggregator({\n        getAggregator: function getAggregator(props) {\n          return props.hexagonAggregator;\n        },\n        getCellSize: function getCellSize(props) {\n          return props.radius;\n        }\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var cpuAggregator = this.state.cpuAggregator;\n      var oldLayerData = cpuAggregator.state.layerData;\n      this.setState({\n        aggregatorState: cpuAggregator.updateState({\n          oldProps: oldProps,\n          props: props,\n          changeFlags: changeFlags\n        }, this.context.viewport)\n      });\n\n      if (oldLayerData !== cpuAggregator.state.layerData) {\n        var hexagonVertices = cpuAggregator.state.layerData.hexagonVertices;\n        this.updateRadiusAngle(hexagonVertices);\n      }\n    }\n  }, {\n    key: \"updateRadiusAngle\",\n    value: function updateRadiusAngle(vertices) {\n      var radius = this.props.radius;\n      var angle = 90;\n\n      if (Array.isArray(vertices)) {\n        if (vertices.length < 6) {\n          log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n        }\n\n        var vertex0 = vertices[0];\n        var vertex3 = vertices[3];\n        var viewport = this.context.viewport;\n\n        var _viewport$getDistance = viewport.getDistanceScales(),\n            pixelsPerMeter = _viewport$getDistance.pixelsPerMeter;\n\n        var spaceCoord0 = this.projectFlat(vertex0);\n        var spaceCoord3 = this.projectFlat(vertex3);\n        var dx = spaceCoord0[0] - spaceCoord3[0];\n        var dy = spaceCoord0[1] - spaceCoord3[1];\n        var dxy = Math.sqrt(dx * dx + dy * dy);\n        angle = Math.acos(dx / dxy) * -Math.sign(dy) / Math.PI * 180 + 90;\n        radius = dxy / 2 / pixelsPerMeter[0];\n      }\n\n      this.setState({\n        angle: angle,\n        radius: radius\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      return this.state.cpuAggregator.getPickingInfo({\n        info: info\n      });\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n  }, {\n    key: \"_getSublayerUpdateTriggers\",\n    value: function _getSublayerUpdateTriggers() {\n      return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$state = this.state,\n          angle = _this$state.angle,\n          radius = _this$state.radius,\n          cpuAggregator = _this$state.cpuAggregator;\n      var SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n      var updateTriggers = this._getSublayerUpdateTriggers();\n\n      return new SubLayerClass({\n        radius: radius,\n        diskResolution: 6,\n        elevationScale: elevationScale,\n        angle: angle,\n        extruded: extruded,\n        coverage: coverage,\n        material: material,\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      }, this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: updateTriggers\n      }), {\n        data: cpuAggregator.state.layerData.data\n      });\n    }\n  }]);\n\n  return HexagonLayer;\n}(CompositeLayer);\n\nexport { HexagonLayer as default };\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}