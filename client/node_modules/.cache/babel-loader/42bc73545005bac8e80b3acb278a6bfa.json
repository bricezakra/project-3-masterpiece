{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Buffer, Model, Transform, FEATURES, hasFeatures, isWebGL2, readPixelsToBuffer, fp64 as fp64ShaderModule, withParameters } from '@luma.gl/core';\nimport { log, project64 } from '@deck.gl/core';\nimport { worldToPixels } from 'viewport-mercator-project';\nvar fp64ifyMatrix4 = fp64ShaderModule.fp64ifyMatrix4;\nimport { DEFAULT_CHANGE_FLAGS, DEFAULT_RUN_PARAMS, MAX_32_BIT_FLOAT, MIN_BLEND_EQUATION, MAX_BLEND_EQUATION, MAX_MIN_BLEND_EQUATION, EQUATION_MAP, ELEMENTCOUNT, DEFAULT_WEIGHT_PARAMS, IDENTITY_MATRIX, PIXEL_SIZE, WEIGHT_SIZE } from './gpu-grid-aggregator-constants';\nimport { AGGREGATION_OPERATION } from '../aggregation-operation-utils';\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport { getFloatTexture, getFramebuffer, getFloatArray } from './../resource-utils.js';\nvar BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nvar ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\nvar REQUIRED_FEATURES = [FEATURES.WEBGL2, FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.BLEND_EQUATION_MINMAX, FEATURES.FLOAT_BLEND, FEATURES.TEXTURE_FLOAT];\n\nvar GPUGridAggregator = function () {\n  _createClass(GPUGridAggregator, null, [{\n    key: \"getAggregationData\",\n    value: function getAggregationData(_ref) {\n      var aggregationData = _ref.aggregationData,\n          maxData = _ref.maxData,\n          minData = _ref.minData,\n          maxMinData = _ref.maxMinData,\n          pixelIndex = _ref.pixelIndex;\n      var index = pixelIndex * PIXEL_SIZE;\n      var results = {};\n\n      if (aggregationData) {\n        results.cellCount = aggregationData[index + 3];\n        results.cellWeight = aggregationData[index];\n      }\n\n      if (maxMinData) {\n        results.maxCellWieght = maxMinData[0];\n        results.minCellWeight = maxMinData[3];\n      } else {\n        if (maxData) {\n          results.maxCellWieght = maxData[0];\n          results.totalCount = maxData[3];\n        }\n\n        if (minData) {\n          results.minCellWeight = minData[0];\n          results.totalCount = maxData[3];\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"getCellData\",\n    value: function getCellData(_ref2) {\n      var countsData = _ref2.countsData,\n          _ref2$size = _ref2.size,\n          size = _ref2$size === void 0 ? 1 : _ref2$size;\n      var numCells = countsData.length / 4;\n      var cellWeights = new Float32Array(numCells * size);\n      var cellCounts = new Uint32Array(numCells);\n\n      for (var i = 0; i < numCells; i++) {\n        for (var sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n          cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n        }\n\n        cellCounts[i] = countsData[i * 4 + 3];\n      }\n\n      return {\n        cellCounts: cellCounts,\n        cellWeights: cellWeights\n      };\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return hasFeatures(gl, REQUIRED_FEATURES);\n    }\n  }]);\n\n  function GPUGridAggregator(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GPUGridAggregator);\n\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      resources: {},\n      results: {}\n    };\n    this._hasGPUSupport = isWebGL2(gl) && hasFeatures(this.gl, FEATURES.BLEND_EQUATION_MINMAX, FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.TEXTURE_FLOAT);\n  }\n\n  _createClass(GPUGridAggregator, [{\n    key: \"delete\",\n    value: function _delete() {\n      var gridAggregationModel = this.gridAggregationModel,\n          allAggregationModel = this.allAggregationModel,\n          meanTransform = this.meanTransform;\n      var _this$state = this.state,\n          positionsBuffer = _this$state.positionsBuffer,\n          positions64xyLowBuffer = _this$state.positions64xyLowBuffer,\n          textures = _this$state.textures,\n          framebuffers = _this$state.framebuffers,\n          maxMinFramebuffers = _this$state.maxMinFramebuffers,\n          minFramebuffers = _this$state.minFramebuffers,\n          maxFramebuffers = _this$state.maxFramebuffers,\n          meanTextures = _this$state.meanTextures,\n          resources = _this$state.resources;\n      gridAggregationModel && gridAggregationModel[\"delete\"]();\n      allAggregationModel && allAggregationModel[\"delete\"]();\n      meanTransform && meanTransform[\"delete\"]();\n      positionsBuffer && positionsBuffer[\"delete\"]();\n      positions64xyLowBuffer && positions64xyLowBuffer[\"delete\"]();\n      this.deleteResources([framebuffers, textures, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, resources]);\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.setState({\n        results: {}\n      });\n      var aggregationParams = this.getAggregationParams(opts);\n      this.updateGridSize(aggregationParams);\n      var useGPU = aggregationParams.useGPU;\n\n      if (this._hasGPUSupport && useGPU) {\n        return this.runAggregationOnGPU(aggregationParams);\n      }\n\n      if (useGPU) {\n        log.warn('GPUGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n      }\n\n      return this.runAggregationOnCPU(aggregationParams);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(weightId) {\n      var data = {};\n      var results = this.state.results;\n\n      if (!results[weightId].aggregationData) {\n        results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n      }\n\n      data.aggregationData = results[weightId].aggregationData;\n\n      for (var arrayName in ARRAY_BUFFER_MAP) {\n        var bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n        if (results[weightId][arrayName] || results[weightId][bufferName]) {\n          results[weightId][arrayName] = results[weightId][arrayName] || results[weightId][bufferName].getData();\n          data[arrayName] = results[weightId][arrayName];\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"deleteResources\",\n    value: function deleteResources(resources) {\n      resources = Array.isArray(resources) ? resources : [resources];\n      resources.forEach(function (obj) {\n        for (var name in obj) {\n          obj[name][\"delete\"]();\n        }\n      });\n    }\n  }, {\n    key: \"getAggregationParams\",\n    value: function getAggregationParams(opts) {\n      var aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n      var useGPU = aggregationParams.useGPU,\n          gridTransformMatrix = aggregationParams.gridTransformMatrix,\n          viewport = aggregationParams.viewport,\n          weights = aggregationParams.weights,\n          projectPoints = aggregationParams.projectPoints,\n          cellSize = aggregationParams.cellSize;\n\n      if (this.state.useGPU !== useGPU) {\n        aggregationParams.changeFlags = Object.assign({}, aggregationParams.changeFlags, DEFAULT_CHANGE_FLAGS);\n      }\n\n      if (cellSize && (!this.state.cellSize || this.state.cellSize[0] !== cellSize[0] || this.state.cellSize[1] !== cellSize[1])) {\n        aggregationParams.changeFlags.cellSizeChanged = true;\n        this.setState({\n          cellSize: cellSize\n        });\n      }\n\n      this.validateProps(aggregationParams, opts);\n      this.setState({\n        useGPU: useGPU\n      });\n      aggregationParams.gridTransformMatrix = (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n      if (weights) {\n        aggregationParams.weights = this.normalizeWeightParams(weights);\n        this.setState({\n          weights: aggregationParams.weights\n        });\n      }\n\n      return aggregationParams;\n    }\n  }, {\n    key: \"normalizeWeightParams\",\n    value: function normalizeWeightParams(weights) {\n      var result = {};\n\n      for (var id in weights) {\n        result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      Object.assign(this.state, updateObject);\n    }\n  }, {\n    key: \"shouldTransformToGrid\",\n    value: function shouldTransformToGrid(opts) {\n      var projectPoints = opts.projectPoints,\n          changeFlags = opts.changeFlags;\n\n      if (!this.state.gridPositions || changeFlags.dataChanged || projectPoints && changeFlags.viewportChanged) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateGridSize\",\n    value: function updateGridSize(opts) {\n      var viewport = opts.viewport,\n          cellSize = opts.cellSize;\n      var width = opts.width || viewport.width;\n      var height = opts.height || viewport.height;\n      var numCol = Math.ceil(width / cellSize[0]);\n      var numRow = Math.ceil(height / cellSize[1]);\n      this.setState({\n        numCol: numCol,\n        numRow: numRow,\n        windowSize: [width, height]\n      });\n    }\n  }, {\n    key: \"validateProps\",\n    value: function validateProps(aggregationParams, opts) {\n      var changeFlags = aggregationParams.changeFlags,\n          projectPoints = aggregationParams.projectPoints,\n          gridTransformMatrix = aggregationParams.gridTransformMatrix;\n      log.assert(changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged);\n      log.assert(!changeFlags.dataChanged || opts.positions && opts.weights && (!opts.projectPositions || opts.viewport) && opts.cellSize);\n      log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n      log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n      if (projectPoints && gridTransformMatrix) {\n        log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n      }\n    }\n  }, {\n    key: \"calculateAggregationData\",\n    value: function calculateAggregationData(opts) {\n      var weights = opts.weights,\n          results = opts.results,\n          cellIndex = opts.cellIndex,\n          posIndex = opts.posIndex;\n\n      for (var id in weights) {\n        var _weights$id = weights[id],\n            values = _weights$id.values,\n            size = _weights$id.size,\n            operation = _weights$id.operation;\n        var aggregationData = results[id].aggregationData;\n\n        for (var sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n          var cellElementIndex = cellIndex + sizeIndex;\n          var weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n          if (aggregationData[cellIndex + 3] === 0) {\n            aggregationData[cellElementIndex] = weightComponent;\n          } else {\n            switch (operation) {\n              case AGGREGATION_OPERATION.SUM:\n              case AGGREGATION_OPERATION.MEAN:\n                aggregationData[cellElementIndex] += weightComponent;\n                break;\n\n              case AGGREGATION_OPERATION.MIN:\n                aggregationData[cellElementIndex] = Math.min(aggregationData[cellElementIndex], weightComponent);\n                break;\n\n              case AGGREGATION_OPERATION.MAX:\n                aggregationData[cellElementIndex] = Math.max(aggregationData[cellElementIndex], weightComponent);\n                break;\n\n              default:\n                log.assert(false);\n                break;\n            }\n          }\n        }\n\n        aggregationData[cellIndex + 3]++;\n      }\n    }\n  }, {\n    key: \"calculateMeanMaxMinData\",\n    value: function calculateMeanMaxMinData(opts) {\n      var validCellIndices = opts.validCellIndices,\n          results = opts.results,\n          weights = opts.weights;\n      validCellIndices.forEach(function (cellIndex) {\n        for (var id in results) {\n          var _weights$id2 = weights[id],\n              size = _weights$id2.size,\n              needMin = _weights$id2.needMin,\n              needMax = _weights$id2.needMax,\n              operation = _weights$id2.operation;\n          var _results$id = results[id],\n              aggregationData = _results$id.aggregationData,\n              minData = _results$id.minData,\n              maxData = _results$id.maxData,\n              maxMinData = _results$id.maxMinData;\n          var calculateMinMax = needMin || needMax;\n          var calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n          var combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n          var count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n\n          for (var sizeIndex = 0; sizeIndex < size && (calculateMinMax || calculateMean); sizeIndex++) {\n            var cellElementIndex = cellIndex + sizeIndex;\n            var weight = aggregationData[cellElementIndex];\n\n            if (calculateMean) {\n              aggregationData[cellElementIndex] /= count;\n              weight = aggregationData[cellElementIndex];\n            }\n\n            if (combineMaxMin) {\n              maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n            } else {\n              if (needMin) {\n                minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n              }\n\n              if (needMax) {\n                maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n              }\n            }\n          }\n\n          if (combineMaxMin) {\n            maxMinData[ELEMENTCOUNT - 1] = Math.min(maxMinData[ELEMENTCOUNT - 1], aggregationData[cellIndex + 0]);\n          } else {\n            if (needMin) {\n              minData[ELEMENTCOUNT - 1] += count;\n            }\n\n            if (needMax) {\n              maxData[ELEMENTCOUNT - 1] += count;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"initCPUResults\",\n    value: function initCPUResults(opts) {\n      var weights = opts.weights || this.state.weights;\n      var _this$state2 = this.state,\n          numCol = _this$state2.numCol,\n          numRow = _this$state2.numRow;\n      var results = {};\n\n      for (var id in weights) {\n        var _weights$id3 = weights[id],\n            aggregationData = _weights$id3.aggregationData,\n            minData = _weights$id3.minData,\n            maxData = _weights$id3.maxData,\n            maxMinData = _weights$id3.maxMinData;\n        var _weights$id4 = weights[id],\n            needMin = _weights$id4.needMin,\n            needMax = _weights$id4.needMax;\n        var combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        var aggregationSize = numCol * numRow * ELEMENTCOUNT;\n        aggregationData = getFloatArray(aggregationData, aggregationSize);\n\n        if (combineMaxMin) {\n          maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n          maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n          maxMinData[ELEMENTCOUNT - 1] = Infinity;\n        } else {\n          if (needMin) {\n            minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n            minData[ELEMENTCOUNT - 1] = 0;\n          }\n\n          if (needMax) {\n            maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n            maxData[ELEMENTCOUNT - 1] = 0;\n          }\n        }\n\n        results[id] = Object.assign({}, weights[id], {\n          aggregationData: aggregationData,\n          minData: minData,\n          maxData: maxData,\n          maxMinData: maxMinData\n        });\n      }\n\n      return results;\n    }\n  }, {\n    key: \"runAggregationOnCPU\",\n    value: function runAggregationOnCPU(opts) {\n      var positions = opts.positions,\n          cellSize = opts.cellSize,\n          gridTransformMatrix = opts.gridTransformMatrix,\n          viewport = opts.viewport,\n          projectPoints = opts.projectPoints;\n      var weights = opts.weights;\n      var _this$state3 = this.state,\n          numCol = _this$state3.numCol,\n          numRow = _this$state3.numRow;\n      var results = this.initCPUResults(opts);\n      var gridTransformRequired = this.shouldTransformToGrid(opts);\n      var gridPositions;\n      var pos = [0, 0, 0];\n      log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n      var posCount;\n\n      if (gridTransformRequired) {\n        posCount = positions.length / 2;\n        gridPositions = new Float64Array(positions.length);\n        this.setState({\n          gridPositions: gridPositions\n        });\n      } else {\n        gridPositions = this.state.gridPositions;\n        weights = this.state.weights;\n        posCount = gridPositions.length / 2;\n      }\n\n      var validCellIndices = new Set();\n\n      for (var posIndex = 0; posIndex < posCount; posIndex++) {\n        var x = void 0;\n        var y = void 0;\n\n        if (gridTransformRequired) {\n          pos[0] = positions[posIndex * 2];\n          pos[1] = positions[posIndex * 2 + 1];\n\n          if (projectPoints) {\n            var _viewport$project = viewport.project(pos);\n\n            var _viewport$project2 = _slicedToArray(_viewport$project, 2);\n\n            x = _viewport$project2[0];\n            y = _viewport$project2[1];\n          } else {\n            var _worldToPixels = worldToPixels(pos, gridTransformMatrix);\n\n            var _worldToPixels2 = _slicedToArray(_worldToPixels, 2);\n\n            x = _worldToPixels2[0];\n            y = _worldToPixels2[1];\n          }\n\n          gridPositions[posIndex * 2] = x;\n          gridPositions[posIndex * 2 + 1] = y;\n        } else {\n          x = gridPositions[posIndex * 2];\n          y = gridPositions[posIndex * 2 + 1];\n        }\n\n        var colId = Math.floor(x / cellSize[0]);\n        var rowId = Math.floor(y / cellSize[1]);\n\n        if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n          var cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n          validCellIndices.add(cellIndex);\n          this.calculateAggregationData({\n            weights: weights,\n            results: results,\n            cellIndex: cellIndex,\n            posIndex: posIndex\n          });\n        }\n      }\n\n      this.calculateMeanMaxMinData({\n        validCellIndices: validCellIndices,\n        results: results,\n        weights: weights\n      });\n      this.updateAggregationBuffers(opts, results);\n      this.setState({\n        results: results\n      });\n      return results;\n    }\n  }, {\n    key: \"_uploadResultsToGPU\",\n    value: function _uploadResultsToGPU(_ref3) {\n      var gl = _ref3.gl,\n          bufferName = _ref3.bufferName,\n          textureName = _ref3.textureName,\n          id = _ref3.id,\n          data = _ref3.data,\n          result = _ref3.result;\n      var resources = this.state.resources;\n      var resourceName = \"cpu-result-\".concat(id, \"-\").concat(bufferName);\n      result[bufferName] = result[bufferName] || resources[resourceName];\n\n      if (result[bufferName]) {\n        result[bufferName].setData({\n          data: data\n        });\n      } else {\n        resources[resourceName] = new Buffer(gl, data);\n        result[bufferName] = resources[resourceName];\n      }\n\n      if (textureName) {\n        var texture = this._getMinMaxTexture(\"\".concat(id, \"-textureName\"));\n\n        texture.setImageData({\n          data: data\n        });\n        result[textureName] = texture;\n      }\n    }\n  }, {\n    key: \"updateAggregationBuffers\",\n    value: function updateAggregationBuffers(opts, results) {\n      if (!opts.createBufferObjects) {\n        return;\n      }\n\n      var weights = opts.weights || this.state.weights;\n\n      for (var id in results) {\n        var _results$id2 = results[id],\n            aggregationData = _results$id2.aggregationData,\n            minData = _results$id2.minData,\n            maxData = _results$id2.maxData,\n            maxMinData = _results$id2.maxMinData;\n        var _weights$id5 = weights[id],\n            needMin = _weights$id5.needMin,\n            needMax = _weights$id5.needMax;\n        var combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n        this._uploadResultsToGPU({\n          gl: this.gl,\n          bufferName: 'aggregationBuffer',\n          id: id,\n          data: aggregationData,\n          result: results[id]\n        });\n\n        if (combineMaxMin) {\n          this._uploadResultsToGPU({\n            gl: this.gl,\n            bufferName: 'maxMinBuffer',\n            textureName: 'maxMinTexture',\n            id: id,\n            data: maxMinData,\n            result: results[id]\n          });\n        } else {\n          if (needMin) {\n            this._uploadResultsToGPU({\n              gl: this.gl,\n              bufferName: 'minBuffer',\n              textureName: 'minTexture',\n              id: id,\n              data: minData,\n              result: results[id]\n            });\n          }\n\n          if (needMax) {\n            this._uploadResultsToGPU({\n              gl: this.gl,\n              bufferName: 'maxBuffer',\n              textureName: 'maxTexture',\n              id: id,\n              data: maxData,\n              result: results[id]\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getAggregateData\",\n    value: function getAggregateData(opts) {\n      var results = {};\n      var _this$state4 = this.state,\n          textures = _this$state4.textures,\n          framebuffers = _this$state4.framebuffers,\n          maxMinFramebuffers = _this$state4.maxMinFramebuffers,\n          minFramebuffers = _this$state4.minFramebuffers,\n          maxFramebuffers = _this$state4.maxFramebuffers,\n          weights = _this$state4.weights,\n          resources = _this$state4.resources;\n\n      for (var id in weights) {\n        results[id] = {};\n        var _weights$id6 = weights[id],\n            needMin = _weights$id6.needMin,\n            needMax = _weights$id6.needMax,\n            combineMaxMin = _weights$id6.combineMaxMin;\n        results[id].aggregationTexture = textures[id];\n        results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n          target: weights[id].aggregationBuffer,\n          sourceType: 5126\n        });\n\n        if (needMin && needMax && combineMaxMin) {\n          results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n            target: weights[id].maxMinBuffer,\n            sourceType: 5126\n          });\n          results[id].maxMinTexture = resources[\"\".concat(id, \"-maxMinTexture\")];\n        } else {\n          if (needMin) {\n            results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n              target: weights[id].minBuffer,\n              sourceType: 5126\n            });\n            results[id].minTexture = resources[\"\".concat(id, \"-minTexture\")];\n          }\n\n          if (needMax) {\n            results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n              target: weights[id].maxBuffer,\n              sourceType: 5126\n            });\n            results[id].maxTexture = resources[\"\".concat(id, \"-maxTexture\")];\n          }\n        }\n      }\n\n      this.trackGPUResultBuffers(results, weights);\n      return results;\n    }\n  }, {\n    key: \"getAggregationModel\",\n    value: function getAggregationModel() {\n      var fp64 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var gl = this.gl;\n      return new Model(gl, {\n        id: 'Gird-Aggregation-Model',\n        vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n        fs: AGGREGATE_TO_GRID_FS,\n        modules: fp64 ? [project64] : ['project32'],\n        vertexCount: 0,\n        drawMode: 0\n      });\n    }\n  }, {\n    key: \"getAllAggregationModel\",\n    value: function getAllAggregationModel() {\n      var gl = this.gl;\n      var _this$state5 = this.state,\n          numCol = _this$state5.numCol,\n          numRow = _this$state5.numRow;\n      return new Model(gl, {\n        id: 'All-Aggregation-Model',\n        vs: AGGREGATE_ALL_VS_FP64,\n        fs: AGGREGATE_ALL_FS,\n        modules: [fp64ShaderModule],\n        vertexCount: 1,\n        drawMode: 0,\n        isInstanced: true,\n        instanceCount: numCol * numRow,\n        attributes: {\n          position: [0, 0]\n        }\n      });\n    }\n  }, {\n    key: \"getMeanTransform\",\n    value: function getMeanTransform(opts) {\n      if (this.meanTransform) {\n        this.meanTransform.update(opts);\n      } else {\n        this.meanTransform = new Transform(this.gl, Object.assign({}, {\n          vs: TRANSFORM_MEAN_VS,\n          _targetTextureVarying: 'meanValues'\n        }, opts));\n      }\n\n      return this.meanTransform;\n    }\n  }, {\n    key: \"renderAggregateData\",\n    value: function renderAggregateData(opts) {\n      var cellSize = opts.cellSize,\n          viewport = opts.viewport,\n          gridTransformMatrix = opts.gridTransformMatrix,\n          projectPoints = opts.projectPoints;\n      var _this$state6 = this.state,\n          numCol = _this$state6.numCol,\n          numRow = _this$state6.numRow,\n          windowSize = _this$state6.windowSize,\n          maxMinFramebuffers = _this$state6.maxMinFramebuffers,\n          minFramebuffers = _this$state6.minFramebuffers,\n          maxFramebuffers = _this$state6.maxFramebuffers,\n          weights = _this$state6.weights;\n      var uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n      var gridSize = [numCol, numRow];\n      var parameters = {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1]\n      };\n      var moduleSettings = {\n        viewport: viewport\n      };\n      var uniforms = {\n        windowSize: windowSize,\n        cellSize: cellSize,\n        gridSize: gridSize,\n        uProjectionMatrix: gridTransformMatrix,\n        uProjectionMatrixFP64: uProjectionMatrixFP64,\n        projectPoints: projectPoints\n      };\n\n      for (var id in weights) {\n        var _weights$id7 = weights[id],\n            needMin = _weights$id7.needMin,\n            needMax = _weights$id7.needMax;\n        var combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        this.renderToWeightsTexture({\n          id: id,\n          parameters: parameters,\n          moduleSettings: moduleSettings,\n          uniforms: uniforms,\n          gridSize: gridSize\n        });\n\n        if (combineMaxMin) {\n          this.renderToMaxMinTexture({\n            id: id,\n            parameters: Object.assign({}, parameters, {\n              blendEquation: MAX_MIN_BLEND_EQUATION\n            }),\n            gridSize: gridSize,\n            minOrMaxFb: maxMinFramebuffers[id],\n            clearParams: {\n              clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]\n            },\n            combineMaxMin: combineMaxMin\n          });\n        } else {\n          if (needMin) {\n            this.renderToMaxMinTexture({\n              id: id,\n              parameters: Object.assign({}, parameters, {\n                blendEquation: MIN_BLEND_EQUATION\n              }),\n              gridSize: gridSize,\n              minOrMaxFb: minFramebuffers[id],\n              clearParams: {\n                clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n              },\n              combineMaxMin: combineMaxMin\n            });\n          }\n\n          if (needMax) {\n            this.renderToMaxMinTexture({\n              id: id,\n              parameters: Object.assign({}, parameters, {\n                blendEquation: MAX_BLEND_EQUATION\n              }),\n              gridSize: gridSize,\n              minOrMaxFb: maxFramebuffers[id],\n              combineMaxMin: combineMaxMin\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"renderToMaxMinTexture\",\n    value: function renderToMaxMinTexture(opts) {\n      var id = opts.id,\n          parameters = opts.parameters,\n          gridSize = opts.gridSize,\n          minOrMaxFb = opts.minOrMaxFb,\n          combineMaxMin = opts.combineMaxMin,\n          _opts$clearParams = opts.clearParams,\n          clearParams = _opts$clearParams === void 0 ? {} : _opts$clearParams;\n      var framebuffers = this.state.framebuffers;\n      var gl = this.gl,\n          allAggregationModel = this.allAggregationModel;\n      minOrMaxFb.bind();\n      gl.viewport(0, 0, gridSize[0], gridSize[1]);\n      withParameters(gl, clearParams, function () {\n        gl.clear(16384);\n      });\n      allAggregationModel.draw({\n        parameters: parameters,\n        uniforms: {\n          uSampler: framebuffers[id].texture,\n          gridSize: gridSize,\n          combineMaxMin: combineMaxMin\n        }\n      });\n      minOrMaxFb.unbind();\n    }\n  }, {\n    key: \"renderToWeightsTexture\",\n    value: function renderToWeightsTexture(opts) {\n      var id = opts.id,\n          parameters = opts.parameters,\n          moduleSettings = opts.moduleSettings,\n          uniforms = opts.uniforms,\n          gridSize = opts.gridSize;\n      var _this$state7 = this.state,\n          framebuffers = _this$state7.framebuffers,\n          equations = _this$state7.equations,\n          weightAttributes = _this$state7.weightAttributes,\n          weights = _this$state7.weights;\n      var gl = this.gl,\n          gridAggregationModel = this.gridAggregationModel;\n      var operation = weights[id].operation;\n      framebuffers[id].bind();\n      gl.viewport(0, 0, gridSize[0], gridSize[1]);\n      var clearColor = operation === AGGREGATION_OPERATION.MIN ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0] : [0, 0, 0, 0];\n      withParameters(gl, {\n        clearColor: clearColor\n      }, function () {\n        gl.clear(16384);\n      });\n      var attributes = {\n        weights: weightAttributes[id]\n      };\n      gridAggregationModel.draw({\n        parameters: Object.assign({}, parameters, {\n          blendEquation: equations[id]\n        }),\n        moduleSettings: moduleSettings,\n        uniforms: uniforms,\n        attributes: attributes\n      });\n      framebuffers[id].unbind();\n\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        var _this$state8 = this.state,\n            meanTextures = _this$state8.meanTextures,\n            textures = _this$state8.textures;\n        var transformOptions = {\n          _sourceTextures: {\n            aggregationValues: meanTextures[id]\n          },\n          _targetTexture: textures[id],\n          elementCount: textures[id].width * textures[id].height\n        };\n        var meanTransform = this.getMeanTransform(transformOptions);\n        meanTransform.run({\n          parameters: {\n            blend: false,\n            depthTest: false\n          }\n        });\n        framebuffers[id].attach(_defineProperty({}, 36064, textures[id]));\n      }\n    }\n  }, {\n    key: \"runAggregationOnGPU\",\n    value: function runAggregationOnGPU(opts) {\n      this.updateModels(opts);\n      this.setupFramebuffers(opts);\n      this.renderAggregateData(opts);\n      var results = this.getAggregateData(opts);\n      this.setState({\n        results: results\n      });\n      return results;\n    }\n  }, {\n    key: \"setupFramebuffers\",\n    value: function setupFramebuffers(opts) {\n      var _this$state9 = this.state,\n          numCol = _this$state9.numCol,\n          numRow = _this$state9.numRow,\n          textures = _this$state9.textures,\n          framebuffers = _this$state9.framebuffers,\n          maxMinFramebuffers = _this$state9.maxMinFramebuffers,\n          minFramebuffers = _this$state9.minFramebuffers,\n          maxFramebuffers = _this$state9.maxFramebuffers,\n          meanTextures = _this$state9.meanTextures,\n          equations = _this$state9.equations,\n          weights = _this$state9.weights;\n      var framebufferSize = {\n        width: numCol,\n        height: numRow\n      };\n\n      for (var id in weights) {\n        var _weights$id8 = weights[id],\n            needMin = _weights$id8.needMin,\n            needMax = _weights$id8.needMax,\n            combineMaxMin = _weights$id8.combineMaxMin,\n            operation = _weights$id8.operation;\n        textures[id] = weights[id].aggregationTexture || textures[id] || getFloatTexture(this.gl, {\n          id: \"\".concat(id, \"-texture\"),\n          width: numCol,\n          height: numRow\n        });\n        textures[id].resize(framebufferSize);\n        var texture = textures[id];\n\n        if (operation === AGGREGATION_OPERATION.MEAN) {\n          meanTextures[id] = meanTextures[id] || getFloatTexture(this.gl, {\n            id: \"\".concat(id, \"-mean-texture\"),\n            width: numCol,\n            height: numRow\n          });\n          meanTextures[id].resize(framebufferSize);\n          texture = meanTextures[id];\n        }\n\n        if (framebuffers[id]) {\n          framebuffers[id].attach(_defineProperty({}, 36064, texture));\n        } else {\n          framebuffers[id] = getFramebuffer(this.gl, {\n            id: \"\".concat(id, \"-fb\"),\n            width: numCol,\n            height: numRow,\n            texture: texture\n          });\n        }\n\n        framebuffers[id].resize(framebufferSize);\n        equations[id] = EQUATION_MAP[operation];\n\n        if (needMin || needMax) {\n          if (needMin && needMax && combineMaxMin) {\n            if (!maxMinFramebuffers[id]) {\n              texture = this._getMinMaxTexture(\"\".concat(id, \"-maxMinTexture\"));\n              maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n                id: \"\".concat(id, \"-maxMinFb\"),\n                texture: texture\n              });\n            }\n          } else {\n            if (needMin) {\n              if (!minFramebuffers[id]) {\n                texture = this._getMinMaxTexture(\"\".concat(id, \"-minTexture\"));\n                minFramebuffers[id] = getFramebuffer(this.gl, {\n                  id: \"\".concat(id, \"-minFb\"),\n                  texture: texture\n                });\n              }\n            }\n\n            if (needMax) {\n              if (!maxFramebuffers[id]) {\n                texture = this._getMinMaxTexture(\"\".concat(id, \"-maxTexture\"));\n                maxFramebuffers[id] = getFramebuffer(this.gl, {\n                  id: \"\".concat(id, \"-maxFb\"),\n                  texture: texture\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getMinMaxTexture\",\n    value: function _getMinMaxTexture(name) {\n      var resources = this.state.resources;\n\n      if (!resources[name]) {\n        resources[name] = getFloatTexture(this.gl, {\n          id: \"resourceName\"\n        });\n      }\n\n      return resources[name];\n    }\n  }, {\n    key: \"setupModels\",\n    value: function setupModels() {\n      var fp64 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.gridAggregationModel) {\n        this.gridAggregationModel[\"delete\"]();\n      }\n\n      this.gridAggregationModel = this.getAggregationModel(fp64);\n\n      if (!this.allAggregationModel) {\n        this.allAggregationModel = this.getAllAggregationModel();\n      }\n    }\n  }, {\n    key: \"setupWeightAttributes\",\n    value: function setupWeightAttributes(opts) {\n      var _this$state10 = this.state,\n          weightAttributes = _this$state10.weightAttributes,\n          vertexCount = _this$state10.vertexCount,\n          weights = _this$state10.weights,\n          resources = _this$state10.resources;\n\n      for (var id in weights) {\n        var values = weights[id].values;\n\n        if (Array.isArray(values) || values.constructor === Float32Array) {\n          log.assert(values.length / 3 === vertexCount);\n          var typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n\n          if (weightAttributes[id] instanceof Buffer) {\n            weightAttributes[id].setData(typedArray);\n          } else {\n            resources[\"\".concat(id, \"-buffer\")] = new Buffer(this.gl, typedArray);\n            weightAttributes[id] = resources[\"\".concat(id, \"-buffer\")];\n          }\n        } else {\n          log.assert(values instanceof Buffer);\n          weightAttributes[id] = values;\n        }\n      }\n    }\n  }, {\n    key: \"trackGPUResultBuffers\",\n    value: function trackGPUResultBuffers(results, weights) {\n      var resources = this.state.resources;\n\n      for (var id in results) {\n        if (results[id]) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = BUFFER_NAMES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var bufferName = _step.value;\n\n              if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n                var name = \"gpu-result-\".concat(id, \"-\").concat(bufferName);\n\n                if (resources[name]) {\n                  resources[name][\"delete\"]();\n                }\n\n                resources[name] = results[id][bufferName];\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateModels\",\n    value: function updateModels(opts) {\n      var gl = this.gl;\n      var positions = opts.positions,\n          positions64xyLow = opts.positions64xyLow,\n          changeFlags = opts.changeFlags;\n      var _this$state11 = this.state,\n          numCol = _this$state11.numCol,\n          numRow = _this$state11.numRow;\n      var aggregationModelAttributes = {};\n      var modelDirty = false;\n\n      if (opts.fp64 !== this.state.fp64) {\n        this.setupModels(opts.fp64);\n        this.setState({\n          fp64: opts.fp64\n        });\n        modelDirty = true;\n      }\n\n      if (changeFlags.dataChanged || !this.state.positionsBuffer) {\n        var _this$state12 = this.state,\n            positionsBuffer = _this$state12.positionsBuffer,\n            positions64xyLowBuffer = _this$state12.positions64xyLowBuffer;\n\n        if (positionsBuffer) {\n          positionsBuffer[\"delete\"]();\n        }\n\n        if (positions64xyLowBuffer) {\n          positions64xyLowBuffer[\"delete\"]();\n        }\n\n        var vertexCount = positions.length / 2;\n        positionsBuffer = new Buffer(gl, new Float32Array(positions));\n        positions64xyLowBuffer = new Buffer(gl, {\n          data: new Float32Array(positions64xyLow),\n          accessor: {\n            size: 2\n          }\n        });\n        this.setState({\n          positionsBuffer: positionsBuffer,\n          positions64xyLowBuffer: positions64xyLowBuffer,\n          vertexCount: vertexCount\n        });\n        this.setupWeightAttributes(opts);\n        modelDirty = true;\n      }\n\n      if (modelDirty) {\n        var _this$state13 = this.state,\n            _vertexCount = _this$state13.vertexCount,\n            _positionsBuffer = _this$state13.positionsBuffer,\n            _positions64xyLowBuffer = _this$state13.positions64xyLowBuffer;\n        aggregationModelAttributes.positions = _positionsBuffer;\n\n        if (opts.fp64) {\n          aggregationModelAttributes.positions64xyLow = _positions64xyLowBuffer;\n        }\n\n        this.gridAggregationModel.setVertexCount(_vertexCount);\n        this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n      }\n\n      if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n        this.allAggregationModel.setInstanceCount(numCol * numRow);\n      }\n    }\n  }]);\n\n  return GPUGridAggregator;\n}();\n\nexport { GPUGridAggregator as default };","map":null,"metadata":{},"sourceType":"module"}