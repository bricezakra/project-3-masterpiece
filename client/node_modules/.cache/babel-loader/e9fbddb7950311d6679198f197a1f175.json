{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { assert } from 'math.gl';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\n\nvar defined = function defined(val) {\n  return val !== null && typeof val !== 'undefined';\n};\n\nvar PerspectiveFrustum = function () {\n  function PerspectiveFrustum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PerspectiveFrustum);\n\n    options = _objectSpread({\n      near: 1.0,\n      far: 500000000.0,\n      xOffset: 0.0,\n      yOffset: 0.0\n    }, options);\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n    this._sseDenominator = undefined;\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n    this.near = options.near;\n    this._near = this.near;\n    this.far = options.far;\n    this._far = this.far;\n    this.xOffset = options.xOffset;\n    this._xOffset = this.xOffset;\n    this.yOffset = options.yOffset;\n    this._yOffset = this.yOffset;\n  }\n\n  _createClass(PerspectiveFrustum, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PerspectiveFrustum({\n        aspectRatio: this.aspectRatio,\n        fov: this.fov,\n        near: this.near,\n        far: this.far\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n        return false;\n      }\n\n      update(this);\n      update(other);\n      return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this.near === other.near && this.far === other.far && this._offCenterFrustum.equals(other._offCenterFrustum);\n    }\n  }, {\n    key: \"computeCullingVolume\",\n    value: function computeCullingVolume(position, direction, up) {\n      update(this);\n      return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n    }\n  }, {\n    key: \"getPixelDimensions\",\n    value: function getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n      update(this);\n      return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result);\n    }\n  }, {\n    key: \"projectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.projectionMatrix;\n    }\n  }, {\n    key: \"infiniteProjectionMatrix\",\n    get: function get() {\n      update(this);\n      return this._offCenterFrustum.infiniteProjectionMatrix;\n    }\n  }, {\n    key: \"fovy\",\n    get: function get() {\n      update(this);\n      return this._fovy;\n    }\n  }, {\n    key: \"sseDenominator\",\n    get: function get() {\n      update(this);\n      return this._sseDenominator;\n    }\n  }]);\n\n  return PerspectiveFrustum;\n}();\n\nexport { PerspectiveFrustum as default };\n\nfunction update(frustum) {\n  assert(Number.isFinite(frustum.fov) && Number.isFinite(frustum.aspectRatio) && Number.isFinite(frustum.near) && Number.isFinite(frustum.far));\n  var f = frustum._offCenterFrustum;\n\n  if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far || frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {\n    assert(frustum.fov >= 0 && frustum.fov < Math.PI);\n    assert(frustum.aspectRatio > 0);\n    assert(frustum.near >= 0 && frustum.near < frustum.far);\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy = frustum.aspectRatio <= 1 ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}