{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { h3ToGeoBoundary, h3GetResolution, h3ToGeo, geoToH3, h3IsPentagon, h3Distance, edgeLength, UNITS } from 'h3-js';\nimport { lerp } from 'math.gl';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { ColumnLayer, PolygonLayer } from '@deck.gl/layers';\nvar UPDATE_THRESHOLD_KM = 10;\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = vertices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var pt = _step.value;\n      var deltaLng = pt[0] - refLng;\n\n      if (deltaLng > 180) {\n        pt[0] -= 360;\n      } else if (deltaLng < -180) {\n        pt[0] += 360;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\nexport function scalePolygon(hexId, vertices, factor) {\n  var _h3ToGeo = h3ToGeo(hexId),\n      _h3ToGeo2 = _slicedToArray(_h3ToGeo, 2),\n      lat = _h3ToGeo2[0],\n      lng = _h3ToGeo2[1];\n\n  var actualCount = vertices.length;\n  normalizeLongitudes(vertices, lng);\n  var vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n\n  for (var i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  var hexagonId = getHexagon(object, objectInfo);\n\n  var _h3ToGeo3 = h3ToGeo(hexagonId),\n      _h3ToGeo4 = _slicedToArray(_h3ToGeo3, 2),\n      lat = _h3ToGeo4[0],\n      lng = _h3ToGeo4[1];\n\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId) {\n  var coverage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    normalizeLongitudes(vertices);\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  var trigger;\n\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (_typeof(getHexagon) === 'object') {\n    trigger = Object.assign({}, getHexagon, {\n      coverage: coverage\n    });\n  } else {\n    trigger = {\n      getHexagon: getHexagon,\n      coverage: coverage\n    };\n  }\n\n  return trigger;\n}\n\nvar defaultProps = Object.assign({}, PolygonLayer.defaultProps, {\n  highPrecision: false,\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getHexagon: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.hexagon;\n    }\n  },\n  extruded: true,\n  getColor: null\n});\ndelete defaultProps.getLineDashArray;\n\nvar H3HexagonLayer = function (_CompositeLayer) {\n  _inherits(H3HexagonLayer, _CompositeLayer);\n\n  function H3HexagonLayer() {\n    _classCallCheck(this, H3HexagonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(H3HexagonLayer).apply(this, arguments));\n  }\n\n  _createClass(H3HexagonLayer, [{\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return this._shouldUseHighPrecision() ? changeFlags.propsOrDataChanged : changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps,\n          changeFlags = _ref2.changeFlags;\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon) {\n        var resolution = -1;\n        var hasPentagon = false;\n\n        var _createIterable = createIterable(props.data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = iterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var object = _step2.value;\n            objectInfo.index++;\n            var hexId = props.getHexagon(object, objectInfo);\n            resolution = resolution < 0 ? h3GetResolution(hexId) : resolution;\n\n            if (h3IsPentagon(hexId)) {\n              hasPentagon = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        this.setState({\n          resolution: resolution,\n          edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n          hasPentagon: hasPentagon\n        });\n      }\n\n      this._updateVertices(this.context.viewport);\n    }\n  }, {\n    key: \"_shouldUseHighPrecision\",\n    value: function _shouldUseHighPrecision() {\n      var _this$state = this.state,\n          resolution = _this$state.resolution,\n          hasPentagon = _this$state.hasPentagon;\n      return this.props.highPrecision || hasPentagon || resolution >= 0 && resolution <= 5;\n    }\n  }, {\n    key: \"_updateVertices\",\n    value: function _updateVertices(viewport) {\n      if (this._shouldUseHighPrecision()) {\n        return;\n      }\n\n      var _this$state2 = this.state,\n          resolution = _this$state2.resolution,\n          edgeLengthKM = _this$state2.edgeLengthKM,\n          centerHex = _this$state2.centerHex;\n\n      if (resolution < 0) {\n        return;\n      }\n\n      var hex = geoToH3(viewport.latitude, viewport.longitude, resolution);\n\n      if (centerHex === hex || centerHex && h3Distance(centerHex, hex) * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n\n      var pixelsPerMeter = viewport.distanceScales.pixelsPerMeter;\n      var vertices = h3ToPolygon(hex);\n\n      var _h3ToGeo5 = h3ToGeo(hex),\n          _h3ToGeo6 = _slicedToArray(_h3ToGeo5, 2),\n          centerLat = _h3ToGeo6[0],\n          centerLng = _h3ToGeo6[1];\n\n      var _viewport$projectFlat = viewport.projectFlat([centerLng, centerLat]),\n          _viewport$projectFlat2 = _slicedToArray(_viewport$projectFlat, 2),\n          centerX = _viewport$projectFlat2[0],\n          centerY = _viewport$projectFlat2[1];\n\n      vertices = vertices.map(function (p) {\n        var worldPosition = viewport.projectFlat(p);\n        worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];\n        worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];\n        return worldPosition;\n      });\n      this.setState({\n        centerHex: hex,\n        vertices: vertices\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n    }\n  }, {\n    key: \"_getForwardProps\",\n    value: function _getForwardProps() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          material = _this$props.material,\n          coverage = _this$props.coverage,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          getColor = _this$props.getColor,\n          getFillColor = _this$props.getFillColor,\n          getElevation = _this$props.getElevation,\n          getLineColor = _this$props.getLineColor,\n          getLineWidth = _this$props.getLineWidth,\n          updateTriggers = _this$props.updateTriggers;\n      return {\n        elevationScale: elevationScale,\n        extruded: extruded,\n        coverage: coverage,\n        wireframe: wireframe,\n        stroked: stroked,\n        filled: filled,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        material: material,\n        getElevation: getElevation,\n        getFillColor: getColor || getFillColor,\n        getLineColor: getLineColor,\n        getLineWidth: getLineWidth,\n        updateTriggers: {\n          getFillColor: updateTriggers.getColor || updateTriggers.getFillColor,\n          getElevation: updateTriggers.getElevation,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      };\n    }\n  }, {\n    key: \"_renderPolygonLayer\",\n    value: function _renderPolygonLayer() {\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          getHexagon = _this$props2.getHexagon,\n          updateTriggers = _this$props2.updateTriggers,\n          coverage = _this$props2.coverage;\n      var SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n\n      var forwardProps = this._getForwardProps();\n\n      forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n      return new SubLayerClass(forwardProps, this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }), {\n        data: data,\n        getPolygon: function getPolygon(object, objectInfo) {\n          var hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId, coverage);\n        }\n      });\n    }\n  }, {\n    key: \"_renderColumnLayer\",\n    value: function _renderColumnLayer() {\n      var _this$props3 = this.props,\n          data = _this$props3.data,\n          getHexagon = _this$props3.getHexagon,\n          updateTriggers = _this$props3.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n      var forwardProps = this._getForwardProps();\n\n      forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n      return new SubLayerClass(forwardProps, this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }), {\n        data: data,\n        diskResolution: 6,\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      });\n    }\n  }]);\n\n  return H3HexagonLayer;\n}(CompositeLayer);\n\nexport { H3HexagonLayer as default };\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';","map":null,"metadata":{},"sourceType":"module"}