{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, WebMercatorViewport, createIterable, log, experimental } from '@deck.gl/core';\nvar count = experimental.count;\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { AGGREGATION_OPERATION } from '../utils/aggregation-operation-utils';\nimport { Model, Geometry, Buffer, FEATURES, hasFeatures } from '@luma.gl/core';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nvar DEFAULT_MINCOLOR = [0, 0, 0, 0];\nvar DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nvar COLOR_PROPS = [\"minColor\", \"maxColor\", \"colorRange\", \"colorDomain\"];\nvar defaultProps = {\n  cellSizePixels: {\n    value: 100,\n    min: 1\n  },\n  cellMarginPixels: {\n    value: 2,\n    min: 0,\n    max: 5\n  },\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getPosition: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: function value(d) {\n      return [1, 0, 0];\n    }\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nvar ScreenGridLayer = function (_Layer) {\n  _inherits(ScreenGridLayer, _Layer);\n\n  function ScreenGridLayer() {\n    _classCallCheck(this, ScreenGridLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScreenGridLayer).apply(this, arguments));\n  }\n\n  _createClass(ScreenGridLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ScreenGridLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: ['picking']\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      var gl = this.context.gl;\n\n      if (!hasFeatures(gl, [FEATURES.TEXTURE_FLOAT])) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"ScreenGridLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          update: this.calculateInstancePositions\n        },\n        instanceCounts: {\n          size: 4,\n          transition: true,\n          accessor: ['getPosition', 'getWeight'],\n          update: this.calculateInstanceCounts,\n          noAlloc: true\n        }\n      });\n      var options = {\n        id: \"\".concat(this.id, \"-aggregator\")\n      };\n      var weights = {\n        color: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM,\n          needMax: true\n        }\n      };\n      this.setState({\n        supported: true,\n        model: this._getModel(gl),\n        gpuGridAggregator: new GPUGridAggregator(gl, options),\n        weights: weights\n      });\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return this.state.supported && changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"updateState\", this).call(this, opts);\n\n      this._updateUniforms(opts);\n\n      if (opts.changeFlags.dataChanged) {\n        this._processData();\n      }\n\n      var changeFlags = this._getAggregationChangeFlags(opts);\n\n      if (changeFlags) {\n        if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n          this._updateGridParams();\n        }\n\n        var pointCount = this.state.pointCount;\n\n        if (pointCount > 0) {\n          this._updateAggregation(changeFlags);\n        }\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(ScreenGridLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state = this.state,\n          aggregationBuffer = _this$state.aggregationBuffer,\n          maxBuffer = _this$state.maxBuffer,\n          gpuGridAggregator = _this$state.gpuGridAggregator,\n          maxTexture = _this$state.maxTexture;\n      gpuGridAggregator[\"delete\"]();\n\n      if (aggregationBuffer) {\n        aggregationBuffer[\"delete\"]();\n      }\n\n      if (maxBuffer) {\n        maxBuffer[\"delete\"]();\n      }\n\n      if (maxTexture) {\n        maxTexture[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n\n      if (!this.state.supported) {\n        return;\n      }\n\n      var _this$props$parameter = this.props.parameters,\n          parameters = _this$props$parameter === void 0 ? {} : _this$props$parameter;\n      var minColor = this.props.minColor || DEFAULT_MINCOLOR;\n      var maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n      var colorDomain = this.props.colorDomain || [1, 0];\n      var _this$state2 = this.state,\n          model = _this$state2.model,\n          cellScale = _this$state2.cellScale,\n          shouldUseMinMax = _this$state2.shouldUseMinMax,\n          colorRange = _this$state2.colorRange,\n          maxTexture = _this$state2.maxTexture;\n      var layerUniforms = {\n        minColor: minColor,\n        maxColor: maxColor,\n        maxTexture: maxTexture,\n        cellScale: cellScale,\n        colorRange: colorRange,\n        colorDomain: colorDomain,\n        shouldUseMinMax: shouldUseMinMax\n      };\n      uniforms = Object.assign(layerUniforms, uniforms);\n      model.draw({\n        uniforms: uniforms,\n        parameters: Object.assign({\n          depthTest: false,\n          depthMask: false\n        }, parameters)\n      });\n    }\n  }, {\n    key: \"calculateInstancePositions\",\n    value: function calculateInstancePositions(attribute, _ref3) {\n      var numInstances = _ref3.numInstances;\n      var _this$context$viewpor = this.context.viewport,\n          width = _this$context$viewpor.width,\n          height = _this$context$viewpor.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var numCol = this.state.numCol;\n      var value = attribute.value,\n          size = attribute.size;\n\n      for (var i = 0; i < numInstances; i++) {\n        var x = i % numCol;\n        var y = Math.floor(i / numCol);\n        value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n        value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n        value[i * size + 2] = 0;\n      }\n    }\n  }, {\n    key: \"calculateInstanceCounts\",\n    value: function calculateInstanceCounts(attribute, _ref4) {\n      var numInstances = _ref4.numInstances;\n      var aggregationBuffer = this.state.aggregationBuffer;\n      attribute.update({\n        buffer: aggregationBuffer\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref5) {\n      var info = _ref5.info,\n          mode = _ref5.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        var gpuGridAggregator = this.state.gpuGridAggregator;\n        var aggregationResults = gpuGridAggregator.getData('color');\n        info.object = GPUGridAggregator.getAggregationData(Object.assign({\n          pixelIndex: index\n        }, aggregationResults));\n      }\n\n      return info;\n    }\n  }, {\n    key: \"_getAggregationChangeFlags\",\n    value: function _getAggregationChangeFlags(_ref6) {\n      var oldProps = _ref6.oldProps,\n          props = _ref6.props,\n          changeFlags = _ref6.changeFlags;\n      var cellSizeChanged = props.cellSizePixels !== oldProps.cellSizePixels || props.cellMarginPixels !== oldProps.cellMarginPixels;\n      var dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n      var viewportChanged = changeFlags.viewportChanged;\n\n      if (cellSizeChanged || dataChanged || viewportChanged) {\n        return {\n          cellSizeChanged: cellSizeChanged,\n          dataChanged: dataChanged,\n          viewportChanged: viewportChanged\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_processData\",\n    value: function _processData() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getPosition = _this$props.getPosition,\n          getWeight = _this$props.getWeight;\n      var pointCount = count(data);\n      var positions = new Float64Array(pointCount * 2);\n      var colorWeights = new Float32Array(pointCount * 3);\n      var weights = this.state.weights;\n\n      var _createIterable = createIterable(data),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          objectInfo.index++;\n          var position = getPosition(object, objectInfo);\n          var weight = getWeight(object, objectInfo);\n          var index = objectInfo.index;\n          positions[index * 2] = position[0];\n          positions[index * 2 + 1] = position[1];\n\n          if (Array.isArray(weight)) {\n            colorWeights[index * 3] = weight[0];\n            colorWeights[index * 3 + 1] = weight[1];\n            colorWeights[index * 3 + 2] = weight[2];\n          } else {\n            colorWeights[index * 3] = weight;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      weights.color.values = colorWeights;\n      this.setState({\n        positions: positions,\n        pointCount: pointCount\n      });\n    }\n  }, {\n    key: \"_shouldUseMinMax\",\n    value: function _shouldUseMinMax() {\n      var _this$props2 = this.props,\n          minColor = _this$props2.minColor,\n          maxColor = _this$props2.maxColor,\n          colorDomain = _this$props2.colorDomain,\n          colorRange = _this$props2.colorRange;\n\n      if (minColor || maxColor) {\n        log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n        return true;\n      }\n\n      if (colorDomain || colorRange) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_updateAggregation\",\n    value: function _updateAggregation(changeFlags) {\n      var attributeManager = this.getAttributeManager();\n      var _this$props3 = this.props,\n          cellSizePixels = _this$props3.cellSizePixels,\n          gpuAggregation = _this$props3.gpuAggregation;\n      var _this$state3 = this.state,\n          positions = _this$state3.positions,\n          weights = _this$state3.weights;\n      var viewport = this.context.viewport;\n      weights.color.operation = AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n      var projectPoints = false;\n      var gridTransformMatrix = null;\n\n      if (this.context.viewport instanceof WebMercatorViewport) {\n        projectPoints = true;\n      } else {\n        projectPoints = false;\n        gridTransformMatrix = viewport.pixelProjectionMatrix;\n      }\n\n      var results = this.state.gpuGridAggregator.run({\n        positions: positions,\n        weights: weights,\n        cellSize: [cellSizePixels, cellSizePixels],\n        viewport: viewport,\n        changeFlags: changeFlags,\n        useGPU: gpuAggregation,\n        projectPoints: projectPoints,\n        gridTransformMatrix: gridTransformMatrix\n      });\n      attributeManager.invalidate('instanceCounts');\n      this.setState({\n        maxTexture: results.color.maxTexture\n      });\n    }\n  }, {\n    key: \"_updateUniforms\",\n    value: function _updateUniforms(_ref7) {\n      var oldProps = _ref7.oldProps,\n          props = _ref7.props,\n          changeFlags = _ref7.changeFlags;\n      var newState = {};\n\n      if (COLOR_PROPS.some(function (key) {\n        return oldProps[key] !== props[key];\n      })) {\n        newState.shouldUseMinMax = this._shouldUseMinMax();\n      }\n\n      if (oldProps.colorRange !== props.colorRange) {\n        newState.colorRange = colorRangeToFlatArray(props.colorRange);\n      }\n\n      if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n        var _this$context$viewpor2 = this.context.viewport,\n            width = _this$context$viewpor2.width,\n            height = _this$context$viewpor2.height;\n        var _this$props4 = this.props,\n            cellSizePixels = _this$props4.cellSizePixels,\n            cellMarginPixels = _this$props4.cellMarginPixels;\n        var margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n        newState.cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);\n      }\n\n      this.setState(newState);\n    }\n  }, {\n    key: \"_updateGridParams\",\n    value: function _updateGridParams() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.invalidateAll();\n      var _this$context$viewpor3 = this.context.viewport,\n          width = _this$context$viewpor3.width,\n          height = _this$context$viewpor3.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var gl = this.context.gl;\n      var numCol = Math.ceil(width / cellSizePixels);\n      var numRow = Math.ceil(height / cellSizePixels);\n      var numInstances = numCol * numRow;\n      var dataBytes = numInstances * 4 * 4;\n      var aggregationBuffer = this.state.aggregationBuffer;\n\n      if (aggregationBuffer) {\n        aggregationBuffer[\"delete\"]();\n      }\n\n      aggregationBuffer = new Buffer(gl, {\n        byteLength: dataBytes,\n        accessor: {\n          size: 4,\n          type: 5126,\n          divisor: 1\n        }\n      });\n      this.state.weights.color.aggregationBuffer = aggregationBuffer;\n      this.setState({\n        numCol: numCol,\n        numRow: numRow,\n        numInstances: numInstances,\n        aggregationBuffer: aggregationBuffer\n      });\n    }\n  }]);\n\n  return ScreenGridLayer;\n}(Layer);\n\nexport { ScreenGridLayer as default };\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}