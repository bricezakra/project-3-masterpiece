{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(primitiveIterator);\n\nimport { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport assert from '../../utils/assert';\nexport default function primitiveIterator(_ref) {\n  var indices, attributes, mode, _ref$start, start, end, info, i;\n\n  return _regeneratorRuntime.wrap(function primitiveIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          indices = _ref.indices, attributes = _ref.attributes, mode = _ref.mode, _ref$start = _ref.start, start = _ref$start === void 0 ? 0 : _ref$start, end = _ref.end;\n\n          if (indices) {\n            indices = indices.values || indices.value || indices;\n          }\n\n          if (end === undefined) {\n            if (indices) {\n              end = indices.length;\n            }\n          }\n\n          info = {\n            attributes: attributes,\n            type: getPrimitiveModeType(mode)\n          };\n          i = start;\n\n        case 5:\n          if (!(i < end)) {\n            _context.next = 44;\n            break;\n          }\n\n          _context.t0 = mode;\n          _context.next = _context.t0 === GL.POINTS ? 9 : _context.t0 === GL.LINES ? 12 : _context.t0 === GL.LINE_STRIP ? 16 : _context.t0 === GL.LINE_LOOP ? 20 : _context.t0 === GL.TRIANGLES ? 24 : _context.t0 === GL.TRIANGLE_STRIP ? 29 : _context.t0 === GL.TRIANGLE_FAN ? 33 : 38;\n          break;\n\n        case 9:\n          info.i1 = i;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 12:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 2;\n          return _context.abrupt(\"break\", 39);\n\n        case 16:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 20:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 24:\n          info.i1 = i;\n          info.i2 = i + 1;\n          info.i3 = i + 2;\n          i += 3;\n          return _context.abrupt(\"break\", 39);\n\n        case 29:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 33:\n          info.i1 = 1;\n          info.i2 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 38:\n          assert(false);\n\n        case 39:\n          if (indices) {\n            if ('i1' in info) {\n              info.i1 = indices[info.i1];\n              info.i2 = indices[info.i2];\n              info.i3 = indices[info.i3];\n            }\n          }\n\n          _context.next = 42;\n          return info;\n\n        case 42:\n          _context.next = 5;\n          break;\n\n        case 44:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":null,"metadata":{},"sourceType":"module"}