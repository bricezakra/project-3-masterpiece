{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix4 } from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\nimport { Intersect } from '../constants';\nvar scratchVector = new Vector3();\nvar scratchVector2 = new Vector3();\n\nvar BoundingSphere = function () {\n  function BoundingSphere() {\n    var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n\n    _classCallCheck(this, BoundingSphere);\n\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  _createClass(BoundingSphere, [{\n    key: \"fromCenterRadius\",\n    value: function fromCenterRadius(center, radius) {\n      this.center.from(center);\n      this.radius = radius;\n      return this;\n    }\n  }, {\n    key: \"fromCornerPoints\",\n    value: function fromCornerPoints(corner, oppositeCorner) {\n      oppositeCorner = scratchVector.from(oppositeCorner);\n      this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n      this.radius = this.center.distance(oppositeCorner);\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(right) {\n      return this === right || Boolean(right) && this.center.equals(right.center) && this.radius === right.radius;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new BoundingSphere(this.center, this.radius);\n    }\n  }, {\n    key: \"union\",\n    value: function union(boundingSphere) {\n      var leftCenter = this.center;\n      var leftRadius = this.radius;\n      var rightCenter = boundingSphere.center;\n      var rightRadius = boundingSphere.radius;\n      var toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n      var centerSeparation = toRightCenter.magnitude();\n\n      if (leftRadius >= centerSeparation + rightRadius) {\n        return this.clone();\n      }\n\n      if (rightRadius >= centerSeparation + leftRadius) {\n        return boundingSphere.clone();\n      }\n\n      var halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n      scratchVector2.copy(toRightCenter).scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation).add(leftCenter);\n      this.center.copy(scratchVector2);\n      this.radius = halfDistanceBetweenTangentPoints;\n      return this;\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(point) {\n      point = scratchVector.from(point);\n      var radius = point.subtract(this.center).magnitude();\n\n      if (radius > this.radius) {\n        this.radius = radius;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"intersectPlane\",\n    value: function intersectPlane(plane) {\n      var center = this.center;\n      var radius = this.radius;\n      var normal = plane.normal;\n      var distanceToPlane = normal.dot(center) + plane.distance;\n\n      if (distanceToPlane < -radius) {\n        return Intersect.OUTSIDE;\n      }\n\n      if (distanceToPlane < radius) {\n        return Intersect.INTERSECTING;\n      }\n\n      return Intersect.INSIDE;\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(_transform) {\n      this.center.transform(_transform);\n      var scale = mat4.getScaling(scratchVector, _transform);\n      this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n      return this;\n    }\n  }, {\n    key: \"distanceSquaredTo\",\n    value: function distanceSquaredTo(point) {\n      point = scratchVector.from(point);\n      var delta = point.subtract(this.center);\n      return delta.lengthSquared() - this.radius * this.radius;\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(point) {\n      return Math.sqrt(this.distanceSquaredTo(point));\n    }\n  }]);\n\n  return BoundingSphere;\n}();\n\nexport { BoundingSphere as default };","map":null,"metadata":{},"sourceType":"module"}