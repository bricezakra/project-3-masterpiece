{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport assert from './assert';\n\nvar ManagedArray = function () {\n  function ManagedArray() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    _classCallCheck(this, ManagedArray);\n\n    this._array = new Array(length);\n    this._length = length;\n  }\n\n  _createClass(ManagedArray, [{\n    key: \"get\",\n    value: function get(index) {\n      assert(index < this._array.length);\n      return this._array[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, element) {\n      assert(index >= 0);\n\n      if (index >= this.length) {\n        this.length = index + 1;\n      }\n\n      this._array[index] = element;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this._array[this._length - 1];\n    }\n  }, {\n    key: \"push\",\n    value: function push(element) {\n      var index = this.length++;\n      this._array[index] = element;\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return this._array[--this.length];\n    }\n  }, {\n    key: \"reserve\",\n    value: function reserve(length) {\n      assert(length >= 0);\n\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(length) {\n      assert(length >= 0);\n      this.length = length;\n    }\n  }, {\n    key: \"trim\",\n    value: function trim() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;\n      this._array.length = length;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    },\n    set: function set(length) {\n      this._length = length;\n\n      if (length > this._array.length) {\n        this._array.length = length;\n      }\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this._array;\n    }\n  }]);\n\n  return ManagedArray;\n}();\n\nexport { ManagedArray as default };","map":null,"metadata":{},"sourceType":"module"}