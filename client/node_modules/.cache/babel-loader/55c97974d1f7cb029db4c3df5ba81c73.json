{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _parameters;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameter, FEATURES, hasFeatures, isWebGL2 } from '@luma.gl/core';\nimport { CompositeLayer, AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nvar RESOLUTION = 2;\nvar SIZE_2K = 2048;\nvar ZOOM_DEBOUNCE = 500;\nvar TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n  dataFormat: 6408\n};\nvar DEFAULT_COLOR_DOMAIN = [0, 0];\nvar defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 30\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  }\n};\nvar REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\n\nvar HeatmapLayer = function (_CompositeLayer) {\n  _inherits(HeatmapLayer, _CompositeLayer);\n\n  function HeatmapLayer() {\n    _classCallCheck(this, HeatmapLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeatmapLayer).apply(this, arguments));\n  }\n\n  _createClass(HeatmapLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n\n      if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n\n      this.setState({\n        supported: true\n      });\n\n      this._setupTextureParams();\n\n      this._setupAttributes();\n\n      this._setupResources();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (!this.state.supported) {\n        return;\n      }\n\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"updateState\", this).call(this, opts);\n\n      var props = opts.props,\n          oldProps = opts.oldProps;\n\n      var changeFlags = this._getChangeFlags(opts);\n\n      if (changeFlags.viewportChanged) {\n        changeFlags.boundsChanged = this._updateBounds();\n      }\n\n      if (changeFlags.dataChanged || changeFlags.boundsChanged || changeFlags.uniformsChanged) {\n        this._updateWeightmap();\n      } else if (changeFlags.viewportZoomChanged) {\n        this._debouncedUpdateWeightmap();\n      }\n\n      if (props.colorRange !== oldProps.colorRange) {\n        this._updateColorTexture(opts);\n      }\n\n      if (changeFlags.viewportChanged) {\n        this._updateTextureRenderingBounds();\n      }\n\n      if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n        var viewport = this.context.viewport;\n        var weightsScale = this.state.weightsScale;\n        var domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n        var colorDomain = props.colorDomain ? props.colorDomain.map(function (x) {\n          return x * domainScale;\n        }) : DEFAULT_COLOR_DOMAIN;\n\n        if (colorDomain[1] > 0 && weightsScale < 1) {\n          var max = Math.min(colorDomain[1], 1);\n          colorDomain[0] *= max / colorDomain[1];\n          colorDomain[1] = max;\n        }\n\n        this.setState({\n          colorDomain: colorDomain\n        });\n      }\n\n      this.setState({\n        zoom: opts.context.viewport.zoom\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          weightsTexture = _this$state.weightsTexture,\n          triPositionBuffer = _this$state.triPositionBuffer,\n          triTexCoordBuffer = _this$state.triTexCoordBuffer,\n          maxWeightsTexture = _this$state.maxWeightsTexture,\n          colorTexture = _this$state.colorTexture,\n          colorDomain = _this$state.colorDomain;\n      var _this$props = this.props,\n          updateTriggers = _this$props.updateTriggers,\n          intensity = _this$props.intensity,\n          threshold = _this$props.threshold;\n      return new TriangleLayer(this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers: updateTriggers\n      }), {\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture: colorTexture,\n        texture: weightsTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"finalizeState\", this).call(this);\n\n      var _this$state2 = this.state,\n          weightsTransform = _this$state2.weightsTransform,\n          weightsTexture = _this$state2.weightsTexture,\n          maxWeightTransform = _this$state2.maxWeightTransform,\n          maxWeightsTexture = _this$state2.maxWeightsTexture,\n          triPositionBuffer = _this$state2.triPositionBuffer,\n          triTexCoordBuffer = _this$state2.triTexCoordBuffer,\n          colorTexture = _this$state2.colorTexture;\n      weightsTransform && weightsTransform[\"delete\"]();\n      weightsTexture && weightsTexture[\"delete\"]();\n      maxWeightTransform && maxWeightTransform[\"delete\"]();\n      maxWeightsTexture && maxWeightsTexture[\"delete\"]();\n      triPositionBuffer && triPositionBuffer[\"delete\"]();\n      triTexCoordBuffer && triTexCoordBuffer[\"delete\"]();\n      colorTexture && colorTexture[\"delete\"]();\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }, {\n    key: \"_getChangeFlags\",\n    value: function _getChangeFlags(opts) {\n      var oldProps = opts.oldProps,\n          props = opts.props;\n      var changeFlags = {};\n\n      if (this._isDataChanged(opts)) {\n        changeFlags.dataChanged = true;\n      }\n\n      if (oldProps.radiusPixels !== props.radiusPixels) {\n        changeFlags.uniformsChanged = true;\n      }\n\n      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n      var zoom = this.state.zoom;\n\n      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n        changeFlags.viewportZoomChanged = true;\n      }\n\n      return changeFlags;\n    }\n  }, {\n    key: \"_getTextures\",\n    value: function _getTextures() {\n      var gl = this.context.gl;\n      var _this$state3 = this.state,\n          textureSize = _this$state3.textureSize,\n          format = _this$state3.format,\n          type = _this$state3.type;\n      return {\n        weightsTexture: new Texture2D(gl, _objectSpread({\n          width: textureSize,\n          height: textureSize,\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS)),\n        maxWeightsTexture: new Texture2D(gl, _objectSpread({\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS))\n      };\n    }\n  }, {\n    key: \"_isDataChanged\",\n    value: function _isDataChanged(_ref2) {\n      var changeFlags = _ref2.changeFlags;\n\n      if (changeFlags.dataChanged) {\n        return true;\n      }\n\n      if (changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition || changeFlags.updateTriggersChanged.getWeight)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_setupAttributes\",\n    value: function _setupAttributes() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        },\n        weights: {\n          size: 1,\n          accessor: 'getWeight'\n        }\n      });\n    }\n  }, {\n    key: \"_setupTextureParams\",\n    value: function _setupTextureParams() {\n      var gl = this.context.gl;\n      var textureSize = Math.min(SIZE_2K, getParameter(gl, 3379));\n      var floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n\n      var _getTextureParams = getTextureParams({\n        gl: gl,\n        floatTargetSupport: floatTargetSupport\n      }),\n          format = _getTextureParams.format,\n          type = _getTextureParams.type;\n\n      var weightsScale = floatTargetSupport ? 1 : 1 / 255;\n      this.setState({\n        textureSize: textureSize,\n        format: format,\n        type: type,\n        weightsScale: weightsScale\n      });\n\n      if (!floatTargetSupport) {\n        log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n      }\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var gl = this.context.gl;\n      var textureSize = this.state.textureSize;\n\n      var _this$_getTextures = this._getTextures(),\n          weightsTexture = _this$_getTextures.weightsTexture,\n          maxWeightsTexture = _this$_getTextures.maxWeightsTexture;\n\n      var weightsTransform = new Transform(gl, {\n        id: \"\".concat(this.id, \"-weights-transform\"),\n        vs: weights_vs,\n        _fs: weights_fs,\n        modules: ['project32'],\n        elementCount: 1,\n        _targetTexture: weightsTexture,\n        _targetTextureVarying: 'weightsTexture'\n      });\n      var maxWeightTransform = new Transform(gl, {\n        id: \"\".concat(this.id, \"-max-weights-transform\"),\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture',\n        vs: vs_max,\n        elementCount: textureSize * textureSize\n      });\n      this.setState({\n        weightsTexture: weightsTexture,\n        maxWeightsTexture: maxWeightsTexture,\n        weightsTransform: weightsTransform,\n        model: weightsTransform.model,\n        maxWeightTransform: maxWeightTransform,\n        zoom: null,\n        triPositionBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 3\n          }\n        }),\n        triTexCoordBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 2\n          }\n        })\n      });\n    }\n  }, {\n    key: \"_updateMaxWeightValue\",\n    value: function _updateMaxWeightValue() {\n      var maxWeightTransform = this.state.maxWeightTransform;\n      maxWeightTransform.run({\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32776\n        }\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var textureSize = this.state.textureSize;\n      var viewport = this.context.viewport;\n      var viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])];\n      var visibleWorldBounds = getBounds(viewportCorners);\n\n      var visibleCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      var newState = {\n        visibleWorldBounds: visibleWorldBounds,\n        viewportCorners: viewportCorners\n      };\n      var boundsChanged = false;\n\n      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n        var scaledCommonBounds = scaleToAspectRatio(visibleCommonBounds, textureSize * RESOLUTION, textureSize * RESOLUTION);\n\n        var worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n          worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n          worldBounds[0] = Math.max(worldBounds[0], -360);\n          worldBounds[2] = Math.min(worldBounds[2], 360);\n        }\n\n        var normalizedCommonBounds = this._worldToCommonBounds(worldBounds, {\n          scaleToAspect: true,\n          normalize: true,\n          width: textureSize * RESOLUTION,\n          height: textureSize * RESOLUTION\n        });\n\n        newState.worldBounds = worldBounds;\n        newState.normalizedCommonBounds = normalizedCommonBounds;\n        boundsChanged = true;\n      }\n\n      this.setState(newState);\n      return boundsChanged;\n    }\n  }, {\n    key: \"_updateTextureRenderingBounds\",\n    value: function _updateTextureRenderingBounds() {\n      var _this$state4 = this.state,\n          triPositionBuffer = _this$state4.triPositionBuffer,\n          triTexCoordBuffer = _this$state4.triTexCoordBuffer,\n          normalizedCommonBounds = _this$state4.normalizedCommonBounds,\n          viewportCorners = _this$state4.viewportCorners;\n      var viewport = this.context.viewport;\n      var commonBounds = normalizedCommonBounds.map(function (x) {\n        return x * viewport.scale;\n      });\n      triPositionBuffer.subData(packVertices(viewportCorners, 3));\n      var textureBounds = viewportCorners.map(function (p) {\n        return getTextureCoordinates(viewport.projectPosition(p), commonBounds);\n      });\n      triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n    }\n  }, {\n    key: \"_updateColorTexture\",\n    value: function _updateColorTexture(opts) {\n      var colorRange = opts.props.colorRange;\n      var colorTexture = this.state.colorTexture;\n      var colors = colorRangeToFlatArray(colorRange, true);\n\n      if (colorTexture) {\n        colorTexture.setImageData({\n          data: colors,\n          width: colorRange.length\n        });\n      } else {\n        colorTexture = new Texture2D(this.context.gl, _objectSpread({\n          data: colors,\n          width: colorRange.length,\n          height: 1,\n          format: isWebGL2(this.context.gl) ? 34836 : 6408,\n          type: 5126\n        }, TEXTURE_OPTIONS));\n      }\n\n      this.setState({\n        colorTexture: colorTexture\n      });\n    }\n  }, {\n    key: \"_updateWeightmap\",\n    value: function _updateWeightmap() {\n      var _weightsTexture$setPa;\n\n      var radiusPixels = this.props.radiusPixels;\n      var _this$state5 = this.state,\n          weightsTransform = _this$state5.weightsTransform,\n          worldBounds = _this$state5.worldBounds,\n          textureSize = _this$state5.textureSize,\n          weightsTexture = _this$state5.weightsTexture,\n          weightsScale = _this$state5.weightsScale;\n\n      this._updateAttributes(this.props);\n\n      var moduleParameters = Object.assign(Object.create(this.props), {\n        viewport: this.context.viewport,\n        pickingActive: 0\n      });\n\n      var commonBounds = this._worldToCommonBounds(worldBounds, {\n        useLayerCoordinateSystem: true,\n        scaleToAspect: true,\n        width: textureSize * RESOLUTION,\n        height: textureSize * RESOLUTION\n      });\n\n      var uniforms = Object.assign({}, weightsTransform.model.getModuleUniforms(moduleParameters), {\n        radiusPixels: radiusPixels,\n        commonBounds: commonBounds,\n        textureWidth: textureSize,\n        weightsScale: weightsScale\n      });\n      weightsTransform.update({\n        elementCount: this.getNumInstances()\n      });\n      weightsTransform.run({\n        uniforms: uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true\n      });\n\n      this._updateMaxWeightValue();\n\n      weightsTexture.setParameters((_weightsTexture$setPa = {}, _defineProperty(_weightsTexture$setPa, 10240, 9729), _defineProperty(_weightsTexture$setPa, 10241, 9729), _weightsTexture$setPa));\n      this.setState({\n        lastUpdate: Date.now()\n      });\n    }\n  }, {\n    key: \"_debouncedUpdateWeightmap\",\n    value: function _debouncedUpdateWeightmap() {\n      var fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var updateTimer = this.state.updateTimer;\n      var timeSinceLastUpdate = Date.now() - this.state.lastUpdate;\n\n      if (fromTimer) {\n        updateTimer = null;\n      }\n\n      if (timeSinceLastUpdate >= ZOOM_DEBOUNCE) {\n        this._updateBounds(true);\n\n        this._updateWeightmap();\n\n        this._updateTextureRenderingBounds();\n      } else if (!updateTimer) {\n        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE - timeSinceLastUpdate);\n      }\n\n      this.setState({\n        updateTimer: updateTimer\n      });\n    }\n  }, {\n    key: \"_worldToCommonBounds\",\n    value: function _worldToCommonBounds(worldBounds) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$useLayerCoordin = opts.useLayerCoordinateSystem,\n          useLayerCoordinateSystem = _opts$useLayerCoordin === void 0 ? false : _opts$useLayerCoordin,\n          _opts$scaleToAspect = opts.scaleToAspect,\n          scaleToAspect = _opts$scaleToAspect === void 0 ? false : _opts$scaleToAspect,\n          width = opts.width,\n          height = opts.height;\n\n      var _worldBounds = _slicedToArray(worldBounds, 4),\n          minLong = _worldBounds[0],\n          minLat = _worldBounds[1],\n          maxLong = _worldBounds[2],\n          maxLat = _worldBounds[3];\n\n      var viewport = this.context.viewport;\n      var topLeftCommon;\n      var bottomRightCommon;\n\n      if (useLayerCoordinateSystem) {\n        topLeftCommon = this.projectPosition([minLong, maxLat, 0]);\n        bottomRightCommon = this.projectPosition([maxLong, minLat, 0]);\n      } else {\n        topLeftCommon = viewport.projectPosition([minLong, maxLat, 0]);\n        bottomRightCommon = viewport.projectPosition([maxLong, minLat, 0]);\n      }\n\n      var commonBounds = topLeftCommon.slice(0, 2).concat(bottomRightCommon.slice(0, 2));\n\n      if (scaleToAspect) {\n        commonBounds = scaleToAspectRatio(commonBounds, width, height);\n      }\n\n      if (opts.normalize) {\n        commonBounds = commonBounds.map(function (x) {\n          return x / viewport.scale;\n        });\n      }\n\n      return commonBounds;\n    }\n  }, {\n    key: \"_commonToWorldBounds\",\n    value: function _commonToWorldBounds(commonBounds) {\n      var _commonBounds = _slicedToArray(commonBounds, 4),\n          xMin = _commonBounds[0],\n          yMin = _commonBounds[1],\n          xMax = _commonBounds[2],\n          yMax = _commonBounds[3];\n\n      var viewport = this.context.viewport;\n      var topLeftWorld = viewport.unprojectPosition([xMin, yMax]);\n      var bottomRightWorld = viewport.unprojectPosition([xMax, yMin]);\n      return topLeftWorld.slice(0, 2).concat(bottomRightWorld.slice(0, 2));\n    }\n  }]);\n\n  return HeatmapLayer;\n}(CompositeLayer);\n\nexport { HeatmapLayer as default };\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}