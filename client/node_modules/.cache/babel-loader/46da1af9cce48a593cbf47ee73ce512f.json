{"ast":null,"code":"export var GLTF_FORMAT = {\n  URI: 0,\n  EMBEDDED: 1\n};\nexport function parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset) {\n  var gltfByteLength = tile.byteOffset + tile.byteLength - byteOffset;\n\n  if (gltfByteLength === 0) {\n    throw new Error('glTF byte length must be greater than 0.');\n  }\n\n  var subArray = new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + gltfByteLength);\n  var arrayCopy = new Uint8Array(subArray);\n  tile.gltfArrayBuffer = arrayCopy.buffer;\n  tile.gltfByteOffset = 0;\n  tile.gltfByteLength = gltfByteLength;\n  tile.rotateYtoZ = true;\n  return tile.byteOffset + tile.byteLength;\n}\nexport function extractGLTF(tile, gltfFormat, options) {\n  switch (gltfFormat) {\n    case GLTF_FORMAT.URI:\n      var gltfUrlBytes = new Uint8Array(tile.gltfArrayBuffer, tile.gltfByteOffset);\n      var textDecoder = new TextDecoder();\n      var gltfUrl = textDecoder.decode(gltfUrlBytes);\n      tile.gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, '');\n      break;\n\n    case GLTF_FORMAT.EMBEDDED:\n      tile.gltf = {};\n      break;\n\n    default:\n      throw new Error(\"i3dm: glTF format \".concat(gltfFormat, \": Must be 0 (uri) or 1 (embedded)\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}