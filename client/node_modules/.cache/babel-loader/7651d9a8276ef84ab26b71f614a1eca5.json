{"ast":null,"code":"import { Matrix3, _MathUtils } from 'math.gl';\nvar scratchMatrix = new Matrix3();\nvar scratchUnitary = new Matrix3();\nvar scratchDiagonal = new Matrix3();\nvar jMatrix = new Matrix3();\nvar jMatrixTranspose = new Matrix3();\nexport default function computeEigenDecomposition(matrix) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var EIGEN_TOLERANCE = _MathUtils.EPSILON20;\n  var EIGEN_MAX_SWEEPS = 10;\n  var count = 0;\n  var sweep = 0;\n  var unitaryMatrix = scratchUnitary;\n  var diagonalMatrix = scratchDiagonal;\n  unitaryMatrix.identity();\n  diagonalMatrix.copy(matrix);\n  var epsilon = EIGEN_TOLERANCE * computeFrobeniusNorm(diagonalMatrix);\n\n  while (sweep < EIGEN_MAX_SWEEPS && offDiagonalFrobeniusNorm(diagonalMatrix) > epsilon) {\n    shurDecomposition(diagonalMatrix, jMatrix);\n    jMatrixTranspose.copy(jMatrix).transpose();\n    diagonalMatrix.multiplyRight(jMatrix);\n    diagonalMatrix.multiplyLeft(jMatrixTranspose);\n    unitaryMatrix.multiplyRight(jMatrix);\n\n    if (++count > 2) {\n      ++sweep;\n      count = 0;\n    }\n  }\n\n  result.unitary = unitaryMatrix.toTarget(result.unitary);\n  result.diagonal = diagonalMatrix.toTarget(result.diagonal);\n  return result;\n}\n\nfunction computeFrobeniusNorm(matrix) {\n  var norm = 0.0;\n\n  for (var i = 0; i < 9; ++i) {\n    var temp = matrix[i];\n    norm += temp * temp;\n  }\n\n  return Math.sqrt(norm);\n}\n\nvar rowVal = [1, 0, 0];\nvar colVal = [2, 2, 1];\n\nfunction offDiagonalFrobeniusNorm(matrix) {\n  var norm = 0.0;\n\n  for (var i = 0; i < 3; ++i) {\n    var temp = matrix[scratchMatrix.getElementIndex(colVal[i], rowVal[i])];\n    norm += 2.0 * temp * temp;\n  }\n\n  return Math.sqrt(norm);\n}\n\nfunction shurDecomposition(matrix, result) {\n  var tolerance = _MathUtils.EPSILON15;\n  var maxDiagonal = 0.0;\n  var rotAxis = 1;\n\n  for (var i = 0; i < 3; ++i) {\n    var temp = Math.abs(matrix[scratchMatrix.getElementIndex(colVal[i], rowVal[i])]);\n\n    if (temp > maxDiagonal) {\n      rotAxis = i;\n      maxDiagonal = temp;\n    }\n  }\n\n  var p = rowVal[rotAxis];\n  var q = colVal[rotAxis];\n  var c = 1.0;\n  var s = 0.0;\n\n  if (Math.abs(matrix[scratchMatrix.getElementIndex(q, p)]) > tolerance) {\n    var qq = matrix[scratchMatrix.getElementIndex(q, q)];\n    var pp = matrix[scratchMatrix.getElementIndex(p, p)];\n    var qp = matrix[scratchMatrix.getElementIndex(q, p)];\n    var tau = (qq - pp) / 2.0 / qp;\n    var t;\n\n    if (tau < 0.0) {\n      t = -1.0 / (-tau + Math.sqrt(1.0 + tau * tau));\n    } else {\n      t = 1.0 / (tau + Math.sqrt(1.0 + tau * tau));\n    }\n\n    c = 1.0 / Math.sqrt(1.0 + t * t);\n    s = t * c;\n  }\n\n  Matrix3.IDENTITY.to(result);\n  result[scratchMatrix.getElementIndex(p, p)] = result[scratchMatrix.getElementIndex(q, q)] = c;\n  result[scratchMatrix.getElementIndex(q, p)] = s;\n  result[scratchMatrix.getElementIndex(p, q)] = -s;\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}