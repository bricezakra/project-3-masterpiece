{"version":3,"sources":["components/About.js","components/Shop.js","components/SearchableMap.js","components/SideNavigation.js","App.js","serviceWorker.js","index.js"],"names":["Shop","style","marginLeft","MAPBOX_TOKEN","SearchableMap","state","viewport","width","height","latitude","longitude","zoom","wifiHotspots","userLocation","myMap","React","createRef","handleViewportChange","setState","setUserLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","long","newViewport","filterFreeWifi","hotspots","filter","spot","type","fetchStationAPI","fetch","then","res","json","freeWifi","loadWifiMarkers","map","key","objectid","parseFloat","src","alt","this","console","log","className","onClick","ref","onViewportChange","mapStyle","mapboxApiAccessToken","mapRef","Object","keys","length","Component","Home","SideNavigation","Route","render","location","history","Fragment","onSelect","selected","to","pathname","push","Toggle","Nav","defaultSelected","eventKey","fontSize","path","exact","component","props","About","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d452b263.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Shop() {\n    return (\n        <div  style={{ marginLeft: 64 }}> \n            <h1> About </h1>\n         </div>\n    )\n}\n\nexport default Shop","import React from 'react';\n\nfunction Shop() {\n    return (\n            <h1> Shop </h1>\n            \n    )\n}\n\nexport default Shop","// import \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport \"../App.css\";\nimport React from \"react\";\nimport ReactMapGL, { GeolocateControl, NavigationControl, Marker } from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\n\nconst MAPBOX_TOKEN =\"pk.eyJ1IjoiYnJpY2V6YWtyYSIsImEiOiJjazJwbmR3bmcwNjRmM25wZ2VmaTM3MHJ0In0.5F4SAt1Rtc-MXzjv6wxWaQ\";\nclass SearchableMap extends React.Component {\n  state = {\n    viewport: {\n      width: \"100vw\",\n      height: \"100vh\",\n      latitude: 40.7250863,\n      longitude: -73.9773608,\n      zoom: 11\n    },\n    wifiHotspots: [],\n    userLocation: {}\n  };\n  myMap = React.createRef();\n\n  handleViewportChange = viewport => {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  };\n\n  setUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n       let setUserLocation = {\n           lat: position.coords.latitude,\n           long: position.coords.longitude\n        };\n       let newViewport = {\n          height: \"100vh\",\n          width: \"100vw\",\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          zoom: 10\n        };\n        this.setState({\n          viewport: newViewport,\n          userLocation: setUserLocation\n       });\n    });\n  };\n\n  componentDidMount() {\n    this.fetchStationAPI();\n  }\n\n  filterFreeWifi = hotspots => {\n    return hotspots.filter(spot => {\n        return spot.type === \"Free\";\n     });\n  };\n  \n  fetchStationAPI = () => {\n    fetch(\"https://data.cityofnewyork.us/resource/yjub-udmw.json\")\n    .then(res => res.json())\n    .then(hotspots => {\n       let freeWifi = this.filterFreeWifi(hotspots);\n       this.setState({\n         wifiHotspots: freeWifi\n        });\n    });\n  };\n\n  loadWifiMarkers = () => {\n    return this.state.wifiHotspots.map(spot => {\n      return (\n        <Marker\n           key={spot.objectid}\n           latitude={parseFloat(spot.latitude)}\n           longitude={parseFloat(spot.longitude)}\n        >\n          <img src=\"/wifi.png\" alt=\"\" />\n        </Marker>\n      );\n    });\n  };\n\n  render() {\n    console.log(this.state.viewport);\n    return (\n      <div className=\"App\" style={{ marginLeft: 64 }}>\n        <button onClick={this.setUserLocation}>My location</button>\n        <div className=\"map\">\n          <ReactMapGL\n            ref={this.myMap}\n            {...this.state.viewport}\n            width=\"100vw\"\n            height=\"100vh\"\n            onViewportChange={this.handleViewportChange}\n            mapStyle=\"mapbox://styles/bricezakra/ck2psrdx91xod1cq8jz5q18bp\"\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          >\n            <Geocoder\n              position=\"top-left\"\n              mapRef={this.myMap}\n              mapboxApiAccessToken={MAPBOX_TOKEN}\n             onViewportChange={this.handleViewportChange}\n            />\n            <GeolocateControl />\n            <NavigationControl />\n            {Object.keys(this.state.userLocation).length !== 0 ? (\n              <Marker\n                latitude={this.state.userLocation.lat}\n                longitude={this.state.userLocation.long}\n              >\n                <img className=\"location-icon\" src=\"location-icon.png\" alt=\"\" />\n              </Marker>\n            ) : ( \n               <div></div>\n            )}\n            {this.loadWifiMarkers()}\n          </ReactMapGL>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchableMap;\n","import React from 'react';\r\n// import { Link } from 'react-router-dom'\r\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\r\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport About from './About';\r\nimport Shop from './Shop';\r\nimport SearchableMap from './SearchableMap';\r\n// Be sure to include styles at some point, probably during your bootstraping\r\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\r\n\r\n\r\nfunction SideNavigation() {\r\n    return (\r\n        <Router>\r\n            <Route render={({ location, history }) => (\r\n                <React.Fragment>\r\n                    <SideNav\r\n                        onSelect={(selected) => {\r\n                            const to = '/' + selected;\r\n                            if (location.pathname !== to) {\r\n                                history.push(to);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <SideNav.Toggle />\r\n                        <SideNav.Nav defaultSelected=\"home\">\r\n                            \r\n                            <NavItem eventKey=\"about\">\r\n                                <NavIcon>\r\n                                    <i className=\"fa fa-fw fa-home\" style={{ fontSize: '1.75em' }} />\r\n                                </NavIcon>\r\n                                <NavText>\r\n                                    About\r\n                        </NavText>\r\n                            </NavItem>\r\n                            <NavItem eventKey=\"shop\">\r\n                                <NavIcon>\r\n                                    <i className=\"fa fa-fw fa-device\" style={{ fontSize: '1.75em' }} />\r\n                                </NavIcon>\r\n                                <NavText>\r\n                                    Shop\r\n                        </NavText>\r\n                            </NavItem>\r\n                            <NavItem eventKey=\"map\">\r\n                                <NavIcon>\r\n                                    <i className=\"fa fa-fw fa-home\" style={{ fontSize: '1.75em' }} />\r\n                                </NavIcon>\r\n                                <NavText>\r\n                                   Wifi Map\r\n                        </NavText>\r\n                            </NavItem>\r\n                        </SideNav.Nav>\r\n                    </SideNav>\r\n                    <main>\r\n                        <Route path=\"/\" exact component={props => <Home />} />\r\n                        <Route path=\"/about\" component={props => <About />} />\r\n                        <Route path=\"/shop\" component={props => <Shop />} />\r\n                        <Route path=\"/map\" component={props => <SearchableMap />} />\r\n                    </main>\r\n                </React.Fragment>\r\n            )}\r\n            />\r\n        </Router>\r\n\r\n        // <nav>\r\n        //     <h3> navbar </h3>\r\n        //     <ul>\r\n        //         <Link to='/about'>\r\n        //             <li>About</li>\r\n        //         </Link>\r\n        //         <Link to='/map'>\r\n        //             <li>Map</li>\r\n        //         </Link>\r\n        //         <Link to='/shop'>\r\n        //             <li>Shop</li>\r\n        //         </Link>\r\n        //     </ul>\r\n        // </nav>\r\n    )\r\n}\r\n\r\nconst Home = () => (\r\n    <div>\r\n      <h1> Home Page</h1>\r\n    </div>\r\n  )\r\n\r\nexport default SideNavigation","\nimport React, { Component } from 'react'\nimport SideNavigation from './components/SideNavigation';\n\n\n\n\nclass App extends Component {\n    \n\n    render(){\n      return (       \n        // <Router>\n          <SideNavigation />\n        //   <Switch>\n        //     <Route path=\"/\" exact component={Home} />\n        //     <Route path=\"/map\"  component={SearchableMap} />\n        //     <Route path=\"/about\" component={About} />\n        //     <Route path=\"/shop\" component={Shop} />\n        //   </Switch>\n        // </Router>\n      )\n    }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}