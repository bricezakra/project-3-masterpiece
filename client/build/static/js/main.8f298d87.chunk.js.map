{"version":3,"sources":["components/About.js","components/SearchableMap.js","components/AdvenTour.js","components/SideNavigation.js","App.js","serviceWorker.js","index.js"],"names":["About","style","marginLeft","color","MAPBOX_TOKEN","SearchableMap","state","viewport","width","height","latitude","longitude","zoom","wifiHotspots","userLocation","selectedHotspot","myMap","React","createRef","handleViewportChange","setState","setUserLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","long","newViewport","filterFreeWifi","hotspots","filter","spot","type","fetchStationAPI","fetch","then","res","json","freeWifi","setSelectedHotspot","object","closePopup","loadWifiMarkers","map","key","objectid","parseFloat","onClick","src","alt","this","console","log","className","ref","onViewportChange","mapStyle","mapboxApiAccessToken","mapRef","positionOptions","enableHighAccuracy","trackUserLocation","showCompass","showZoom","Object","keys","length","onClose","location","city","location_t","Component","AdvenTour","Home","SideNavigation","Route","render","history","Fragment","onSelect","selected","to","pathname","push","Toggle","Nav","defaultSelected","eventKey","fontSize","path","exact","component","props","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f298d87.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction About() {\n   return (\n       <div  style={{ marginLeft: 64 }}>\n           <h2><font color=\"blue\"><strong>ABOUT OUR APP</strong></font></h2>\n           <h3> About Our App:</h3>\n\n            <p>\n               Wi-Finder is an app that locates all free wifi locations in the \n               city of New York, and the app is currently in progress of becoming nationwide. \n               Our backend team which includes Brice Zakra and Randall Fields added features that \n               makes each wifi location interactive. It will show the location name and address, and \n               whether it is an outdoor kiosk, subway station, etc.\n            </p>\n        </div>\n   )\n}\n\nexport default About\n","// import \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport \"../App.css\";\nimport React from \"react\";\nimport ReactMapGL, { GeolocateControl, NavigationControl, Marker, Popup } from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\n\nconst MAPBOX_TOKEN =\"pk.eyJ1IjoiYnJpY2V6YWtyYSIsImEiOiJjazJwbmR3bmcwNjRmM25wZ2VmaTM3MHJ0In0.5F4SAt1Rtc-MXzjv6wxWaQ\";\nclass SearchableMap extends React.Component {\n  state = {\n    viewport: {\n      width: \"100%\",\n      height: \"100vh\",\n      latitude: 40.7250863,\n      longitude: -73.9773608,\n      zoom: 11\n    },\n    wifiHotspots: [],\n    userLocation: {},\n    selectedHotspot: null\n  };\n  myMap = React.createRef();\n\n  handleViewportChange = viewport => {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  };\n\n  setUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n       let setUserLocation = {\n           lat: position.coords.latitude,\n           long: position.coords.longitude\n        };\n       let newViewport = {\n          height: \"100%\",\n          width: \"100vw\",\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          zoom: 10\n        };\n        this.setState({\n          viewport: newViewport,\n          userLocation: setUserLocation\n       });\n    });\n  };\n\n  componentDidMount() {\n    this.fetchStationAPI();\n  }\n\n  filterFreeWifi = hotspots => {\n    return hotspots.filter(spot => {\n        return spot.type === \"Free\";\n     });\n  };\n  \n  fetchStationAPI = () => {\n    fetch(\"https://data.cityofnewyork.us/resource/yjub-udmw.json\")\n    .then(res => res.json())\n    .then(hotspots => {\n       let freeWifi = this.filterFreeWifi(hotspots);\n       this.setState({\n         wifiHotspots: freeWifi\n        });\n    });\n  };\n\n  setSelectedHotspot = object => {\n    this.setState({\n       selectedHotspot: object\n    });\n  };\n\n  closePopup = () => {\n    this.setState({\n      selectedHotspot: null\n    }); \n  };\n\n  loadWifiMarkers = () => {\n    return this.state.wifiHotspots.map(spot => {\n      return (\n        <Marker\n           key={spot.objectid}\n           latitude={parseFloat(spot.latitude)}\n           longitude={parseFloat(spot.longitude)}\n        >\n          <img \n            onClick={() => {\n              this.setSelectedHotspot(spot);\n            }}\n            src=\"/wifi.png\" \n            alt=\"\" \n          />\n        </Marker>\n      );\n    });\n  };\n\n  render() {\n    console.log(this.state.viewport);\n    return (\n      <div className=\"App\">\n        <button onClick={this.setUserLocation}>My location</button>\n        <div className=\"map\" style={{ width:\"100%\"}}>\n          <ReactMapGL\n            style={{ marginLeft: 64 }}\n            ref={this.myMap}\n            {...this.state.viewport}\n            width=\"100%\"\n            height=\"100vh\"\n            onViewportChange={this.handleViewportChange}\n            mapStyle=\"mapbox://styles/bricezakra/ck2psrdx91xod1cq8jz5q18bp\"\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          >\n            <Geocoder\n              position=\"top-left\"\n              mapRef={this.myMap}\n              mapboxApiAccessToken={MAPBOX_TOKEN}\n             onViewportChange={this.handleViewportChange}\n            />\n            <GeolocateControl \n              positionOptions={{ enableHighAccuracy: true }}\n              trackUserLocation={true}\n            />\n            <NavigationControl showCompass={true} showZoom={true}/>\n            {Object.keys(this.state.userLocation).length !== 0 ? (\n              <Marker\n                latitude={this.state.userLocation.lat}\n                longitude={this.state.userLocation.long}\n              >\n                <img className=\"location-icon\" src=\"location-icon.png\" alt=\"marker beer-icon for location\" />\n              </Marker>\n            ) : ( \n               <div></div>\n            )}\n            {this.loadWifiMarkers()}\n\n            {this.state.selectedHotspot !== null ? (\n              <Popup\n                latitude={parseFloat(this.state.selectedHotspot.latitude)}\n                longitude={parseFloat(this.state.selectedHotspot.longitude)}\n                onClose={this.closePopup}\n              >\n                <div>\n                  <p>\n                    <b>Location:</b> {this.state.selectedHotspot.location}{\", \"}\n                    {this.state.selectedHotspot.city}\n                  </p>\n                  <p>\n                    <b>Type:</b> {this.state.selectedHotspot.location_t}\n                  </p>\n                </div>\n              </Popup>\n            ) : null}\n          </ReactMapGL>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchableMap;\n","import React from 'react';\n\n\nfunction AdvenTour () {\n    return (\n        <div style={{ marginLeft: 64 }}>\n            <h1> Travel Tour </h1>\n            <div>Welcome to Our most amazing app but yet simple!</div>\n            <ul>\n                <li>\n                    About\n                </li>\n               <div> AdvenTour is Travel tour, that let's you live life with no excuses, and travel with no regret.\n               </div>\n               <ul>\n                   <li>Sometimes you will never know the value of a moment until it becomes a memory</li>\n               </ul>\n               <ul>\n                   <li>\n                   </li>\n               </ul>\n            </ul>\n            </div>\n    )\n }\n \n  export default AdvenTour;\n","import React from 'react';\n// import { Link } from 'react-router-dom'\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\nimport About from './About';\n\nimport SearchableMap from './SearchableMap';\n// Be sure to include styles at some point, probably during your bootstraping\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\nimport AdvenTour from './AdvenTour';\n\n\nfunction SideNavigation() {\n    return (\n        <Router>\n            <Route render={({ location, history }) => (\n                <React.Fragment>\n                    <SideNav\n                        onSelect={(selected) => {\n                            const to = '/' + selected;\n                            if (location.pathname !== to) {\n                                history.push(to);\n                            }\n                        }}\n                    >\n                        <SideNav.Toggle />\n                        <SideNav.Nav defaultSelected=\"home\">\n                            \n                            <NavItem eventKey=\"about\">\n                                <NavIcon>\n                                    <i className=\"fa fa-fw fa-home\" style={{ fontSize: '1.75em' }} />\n                                </NavIcon>\n                                <NavText>\n                                    About\n                        </NavText>\n                            </NavItem>\n                            <NavItem eventKey=\"tour\">\n                                <NavIcon>\n                                    <i className=\"fa fa-fw fa-device\" style={{ fontSize: '1.75em' }} />\n                                </NavIcon>\n                                <NavText>\n                                    AdvenTour\n                        </NavText>\n                            </NavItem>\n                            <NavItem eventKey=\"map\">\n                                <NavIcon>\n                                    <i className=\"fa fa-fw fa-home\" style={{ fontSize: '1.75em' }} />\n                                </NavIcon>\n                                <NavText>\n                                   Wifi Map\n                        </NavText>\n                            </NavItem>\n                        </SideNav.Nav>\n                    </SideNav>\n                    <main>\n                        <Route path=\"/\" exact component={props => <Home />} />\n                        <Route path=\"/about\" component={props => <About />} />\n                        <Route path=\"/tour\" component={props => <AdvenTour />} />\n                        <Route path=\"/map\" component={props => <SearchableMap />} />\n                    </main>\n                </React.Fragment>\n            )}\n            />\n        </Router>\n\n        // <nav>\n        //     <h3> navbar </h3>\n        //     <ul>\n        //         <Link to='/about'>\n        //             <li>About</li>\n        //         </Link>\n        //         <Link to='/map'>\n        //             <li>Map</li>\n        //         </Link>\n        //         <Link to='/shop'>\n        //             <li>Shop</li>\n        //         </Link>\n        //     </ul>\n        // </nav>\n    )\n}\n\nconst Home = () => (\n    <div style={{ marginLeft: 64 }}>\n      <h1 > Home Page</h1>\n    </div>\n  )\n\nexport default SideNavigation","\nimport React, { Component } from 'react'\nimport SideNavigation from './components/SideNavigation';\n\n\n\n\nclass App extends Component {\n    \n\n    render(){\n      return (       \n        // <Router>\n          <SideNavigation />\n        //   <Switch>\n        //     <Route path=\"/\" exact component={Home} />\n        //     <Route path=\"/map\"  component={SearchableMap} />\n        //     <Route path=\"/about\" component={About} />\n        //     <Route path=\"/shop\" component={Shop} />\n        //   </Switch>\n        // </Router>\n      )\n    }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}